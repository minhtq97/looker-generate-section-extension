"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TileSDKImpl = void 0;
var _errors = require("../../util/errors");
var _types = require("../types");
var _types2 = require("./types");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var defaultHostData = {
  isDashboardEditing: false,
  dashboardRunState: _types2.DashboardRunState.UNKNOWN,
  dashboardFilters: {}
};
class TileSDKImpl {
  constructor(hostApi) {
    _defineProperty(this, "hostApi", void 0);
    _defineProperty(this, "tileHostData", void 0);
    this.hostApi = hostApi;
    this.tileHostData = _objectSpread({}, defaultHostData);
  }
  tileHostDataChanged(partialHostData) {
    if (this.hostApi.isDashboardMountSupported) {
      this.tileHostData = _objectSpread(_objectSpread({}, this.tileHostData), partialHostData);
    }
  }
  addError(error) {
    if (this.hostApi.isDashboardMountSupported) {
      this.hostApi.send(_types.ExtensionRequestType.TILE_ADD_ERRORS, {
        errors: [error]
      });
    } else {
      throw _errors.NOT_DASHBOARD_MOUNT_NOT_SUPPORTED_ERROR;
    }
  }
  clearError() {
    if (this.hostApi.isDashboardMountSupported) {
      this.hostApi.send(_types.ExtensionRequestType.TILE_CLEAR_ERRORS, {
        group: undefined
      });
    } else {
      throw _errors.NOT_DASHBOARD_MOUNT_NOT_SUPPORTED_ERROR;
    }
  }
  addErrors() {
    if (this.hostApi.isDashboardMountSupported) {
      for (var _len = arguments.length, errors = new Array(_len), _key = 0; _key < _len; _key++) {
        errors[_key] = arguments[_key];
      }
      this.hostApi.send(_types.ExtensionRequestType.TILE_ADD_ERRORS, {
        errors
      });
    } else {
      throw _errors.NOT_DASHBOARD_MOUNT_NOT_SUPPORTED_ERROR;
    }
  }
  clearErrors(group) {
    if (this.hostApi.isDashboardMountSupported) {
      this.hostApi.send(_types.ExtensionRequestType.TILE_CLEAR_ERRORS, {
        group
      });
    } else {
      throw _errors.NOT_DASHBOARD_MOUNT_NOT_SUPPORTED_ERROR;
    }
  }
  openDrillMenu(options, event) {
    if (this.hostApi.isDashboardMountSupported) {
      this.hostApi.send(_types.ExtensionRequestType.TILE_OPEN_DRILL_MENU, {
        options,
        event: this.sanitizeEvent(event)
      });
    } else {
      throw _errors.NOT_DASHBOARD_MOUNT_NOT_SUPPORTED_ERROR;
    }
  }
  toggleCrossFilter(options, event) {
    if (this.hostApi.isDashboardMountSupported) {
      this.hostApi.send(_types.ExtensionRequestType.TILE_TOGGLE_CROSS_FILTER, {
        options,
        event: this.sanitizeEvent(event)
      });
    } else {
      throw _errors.NOT_DASHBOARD_MOUNT_NOT_SUPPORTED_ERROR;
    }
  }
  runDashboard() {
    if (this.hostApi.isDashboardMountSupported) {
      this.hostApi.send(_types.ExtensionRequestType.TILE_RUN_DASHBOARD, {});
    } else {
      throw _errors.NOT_DASHBOARD_MOUNT_NOT_SUPPORTED_ERROR;
    }
  }
  stopDashboard() {
    if (this.hostApi.isDashboardMountSupported) {
      this.hostApi.send(_types.ExtensionRequestType.TILE_STOP_DASHBOARD, {});
    } else {
      throw _errors.NOT_DASHBOARD_MOUNT_NOT_SUPPORTED_ERROR;
    }
  }
  updateFilters(filters) {
    var run = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    if (this.hostApi.isDashboardMountSupported) {
      this.hostApi.send(_types.ExtensionRequestType.TILE_UPDATE_FILTERS, {
        filters,
        run
      });
    } else {
      throw _errors.NOT_DASHBOARD_MOUNT_NOT_SUPPORTED_ERROR;
    }
  }
  openScheduleDialog() {
    if (this.hostApi.isDashboardMountSupported) {
      return this.hostApi.sendAndReceive(_types.ExtensionRequestType.TILE_OPEN_SCHEDULE_DIALOG, {});
    } else {
      throw _errors.NOT_DASHBOARD_MOUNT_NOT_SUPPORTED_ERROR;
    }
  }
  sanitizeEvent(event) {
    if (event) {
      return {
        metaKey: event.metaKey,
        pageX: event.pageX,
        pageY: event.pageY,
        type: event.type
      };
    }
    return undefined;
  }
}
exports.TileSDKImpl = TileSDKImpl;
//# sourceMappingURL=tile_sdk.js.map