{"version":3,"file":"types.js","names":[],"sources":["../../../src/connect/visualization/types.ts"],"sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport type { Row } from '../tile';\n\n/**\n * Callback that is invoked when visualization data is received\n * <code>Looker >=22.8</code>\n */\nexport type VisualizationDataReceivedCallback = (\n  visualizationData: RawVisualizationData\n) => void;\n\n/**\n * Raw visualization data. Basic typing for configuration data\n * and query data.\n * <code>Looker >=22.8</code>\n */\nexport interface RawVisualizationData {\n  visConfig: RawVisConfig;\n  queryResponse: RawVisQueryResponse;\n}\n\n/**\n * Visualization configuration. Configuration data set in the\n * explore.\n * <code>Looker >=22.8</code>\n */\nexport interface RawVisConfig {\n  [key: string]: RawVisConfigValue;\n}\n\nexport type RawVisConfigValue = any;\n\n/**\n * Query response data\n * <code>Looker >=22.8</code>\n */\nexport interface RawVisQueryResponse {\n  [key: string]: any;\n  data: RawVisData;\n  fields: {\n    [key: string]: any[];\n  };\n  pivots: RawPivotConfig[];\n}\n\nexport type RawVisData = Row[];\n\nexport interface RawPivotConfig {\n  key: string;\n  is_total: boolean;\n  data: { [key: string]: string };\n  metadata: { [key: string]: { [key: string]: string } };\n}\n\nexport interface Measure extends RawVisConfig {\n  [key: string]: any;\n}\n\nexport interface Dimension extends RawVisConfig {\n  [key: string]: any;\n}\n\nexport interface TableCalculation {\n  [key: string]: any;\n}\n\nexport interface PivotConfig extends RawPivotConfig {\n  [key: string]: any;\n}\n\n/**\n * Visualization configuration data.\n */\nexport interface VisualizationConfig {\n  /**\n   * Measure information\n   */\n  queryFieldMeasures: Measure[];\n  /**\n   * Dimension information\n   */\n  queryFieldDimensions: Dimension[];\n  /**\n   * Table calculation information\n   */\n  queryFieldTableCalculations: TableCalculation[];\n  /**\n   * Pivot information\n   */\n  queryFieldPivots: PivotConfig[];\n  /**\n   * Visual configuration data. This should be merged with the default\n   * configuration and applied to the visualization rendered by the\n   * extension.\n   */\n  visConfig: RawVisConfig;\n}\n\nexport interface QueryResponse {\n  /**\n   * Row data.\n   */\n  data: Row[];\n  /**\n   * Field measure information\n   */\n  fieldMeasures: Measure[];\n  /**\n   * Field dimension information\n   */\n  fieldDimensions: Dimension[];\n  /**\n   * Field table calculation information\n   */\n  fieldTableCalculations: TableCalculation[];\n  /**\n   * Field pivot information\n   */\n  fieldPivots: PivotConfig[];\n  /*\n   * A concatenated array of field measure information and table calculations\n   * that behave like measures.\n   */\n  fieldMeasureLike: Measure[];\n  /*\n   * A concatenated array of field dimension information and table calculations\n   * that behave like dimensions.\n   */\n  fieldDimensionLike: Dimension[];\n}\n\n/**\n * For internal use only.\n */\nexport interface VisualizationSDKInternal extends VisualizationSDK {\n  updateVisData: (rawVisData: RawVisualizationData) => void;\n}\n\n/**\n * Extension visualization SDK\n */\nexport interface VisualizationSDK {\n  /**\n   * Visualization (combination of visConfig and queryResponse data)\n   */\n  visualizationData?: RawVisualizationData;\n  /**\n   * Visualization configuration data.\n   * - measure configurations\n   * - dimension configurations\n   * - table calculations\n   * - pivot configurations\n   * - visualization configurations. These would be used to customize\n   *   the look and feel of a visualization in an explore.\n   */\n  visConfig: VisualizationConfig;\n  /**\n   * Response data from query.\n   * - row data\n   * - field measures\n   * - field table calculations\n   * - field pivots\n   * - field measure like\n   * - field dimension like\n   */\n  queryResponse: QueryResponse;\n  /**\n   * Set the default configurations for an extension visualization.\n   * The configurations will be rendered inside of the explore\n   * visualization editor. This should only be called once.\n   */\n  configureVisualization: (options: VisOptions) => void;\n  /**\n   * Update the visualization configuration.\n   */\n  setVisConfig: (config: RawVisConfig) => void;\n  /**\n   * Update the query row limit.\n   */\n  updateRowLimit: (rowLimit: number) => void;\n}\n\nexport interface VisOptionValue {\n  [label: string]: string;\n}\n\nexport interface VisOption {\n  type: string;\n  values?: VisOptionValue[];\n  display?: string;\n  default?: any;\n  label?: string;\n  section?: string;\n  placeholder?: string;\n  display_size?: 'half' | 'third' | 'normal';\n  order?: number;\n  hidden?: (setOptions: RawVisConfig) => boolean;\n  disabledReason?: (\n    setOptions: RawVisConfig,\n    queryResponse: QueryResponse\n  ) => string | null;\n  min?: number;\n  max?: number;\n  required?: boolean;\n  words?: VisOptionValue[];\n  supports?: string[];\n  color_application?: string;\n  sublabel?: string;\n}\n\nexport interface VisOptions {\n  [optionName: string]: VisOption;\n}\n"],"mappings":""}