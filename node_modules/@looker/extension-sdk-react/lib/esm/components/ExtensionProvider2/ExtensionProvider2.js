var _excluded = ["children", "type"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { useState } from 'react';
import { SdkConnection } from '@looker/extension-sdk';
import { LookerExtensionSDK } from '@looker/sdk';
import { ExtensionConnector } from '../ExtensionConnector';
import { registerCoreSDK2, unregisterCoreSDK2 } from '../../sdk/core_sdk2';
export var ExtensionContext2 = React.createContext(undefined);
export function ExtensionProvider2(props) {
  var {
      children,
      type
    } = props,
    rest = _objectWithoutProperties(props, _excluded);
  var [extensionData, setExtensionData] = useState({});
  var apiVersion = type.ApiVersion;
  var connectedCallback = extensionHost => {
    var coreSDK;
    if (apiVersion) {
      coreSDK = LookerExtensionSDK.createClient(new SdkConnection(extensionHost, apiVersion), type);
    }
    registerCoreSDK2(coreSDK);
    var {
      visualizationSDK,
      tileSDK,
      lookerHostData
    } = extensionHost;
    var {
      visualizationData
    } = visualizationSDK;
    var {
      tileHostData
    } = tileSDK;
    setExtensionData(previousState => {
      return _objectSpread(_objectSpread({}, previousState), {}, {
        extensionSDK: extensionHost,
        coreSDK,
        visualizationSDK,
        tileSDK,
        visualizationData,
        tileHostData,
        lookerHostData
      });
    });
  };
  var unloadedCallback = () => {
    unregisterCoreSDK2();
  };
  var updateContextData = updatedContextData => {
    setExtensionData(previousState => {
      return _objectSpread(_objectSpread({}, previousState), updatedContextData);
    });
  };
  return React.createElement(ExtensionContext2.Provider, {
    value: extensionData
  }, React.createElement(ExtensionConnector, _extends({}, rest, {
    contextData: extensionData,
    connectedCallback: connectedCallback,
    updateContextData: updateContextData,
    unloadedCallback: unloadedCallback
  }), children));
}
//# sourceMappingURL=ExtensionProvider2.js.map