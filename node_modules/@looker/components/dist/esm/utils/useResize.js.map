{"version":3,"file":"useResize.js","names":["throttle","useMemo","useSafeLayoutEffect","useResize","element","handler","throttledHandler","resizeObserver","ResizeObserver","observe","window","addEventListener","disconnect","removeEventListener"],"sources":["../../../src/utils/useResize.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport throttle from 'lodash/throttle';\nimport { useMemo } from 'react';\nimport { useSafeLayoutEffect } from './useSafeLayoutEffect';\n\n/**\n * Calls the provided handler function when the element is resized.\n * If the handler contains a state setter, it should be wrapped in useCallback to avoid an infinite loop.\n * @param element the element to observe\n * @param handler the function to call on resize\n */\nexport const useResize = (element: HTMLElement | null, handler: () => void) => {\n  const throttledHandler = useMemo(() => throttle(handler, 100), [handler]);\n  useSafeLayoutEffect(() => {\n    if (!element) return;\n\n    handler();\n    const resizeObserver = new ResizeObserver(throttledHandler);\n\n    resizeObserver.observe(element);\n    window.addEventListener('resize', throttledHandler);\n\n    return () => {\n      resizeObserver.disconnect();\n      window.removeEventListener('resize', throttledHandler);\n    };\n  }, [handler, throttledHandler, element]);\n};\n"],"mappings":"AAKA,OAAOA,QAAQ,MAAM,iBAAiB;AACtC,SAASC,OAAO,QAAQ,OAAO;AAC/B,SAASC,mBAAmB,QAAQ,uBAAuB;AAQ3D,OAAO,MAAMC,SAAS,GAAGA,CAACC,OAA2B,EAAEC,OAAmB,KAAK;EAC7E,MAAMC,gBAAgB,GAAGL,OAAO,CAAC,MAAMD,QAAQ,CAACK,OAAO,EAAE,GAAG,CAAC,EAAE,CAACA,OAAO,CAAC,CAAC;EACzEH,mBAAmB,CAAC,MAAM;IACxB,IAAI,CAACE,OAAO,EAAE;IAEdC,OAAO,CAAC,CAAC;IACT,MAAME,cAAc,GAAG,IAAIC,cAAc,CAACF,gBAAgB,CAAC;IAE3DC,cAAc,CAACE,OAAO,CAACL,OAAO,CAAC;IAC/BM,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAEL,gBAAgB,CAAC;IAEnD,OAAO,MAAM;MACXC,cAAc,CAACK,UAAU,CAAC,CAAC;MAC3BF,MAAM,CAACG,mBAAmB,CAAC,QAAQ,EAAEP,gBAAgB,CAAC;IACxD,CAAC;EACH,CAAC,EAAE,CAACD,OAAO,EAAEC,gBAAgB,EAAEF,OAAO,CAAC,CAAC;AAC1C,CAAC"}