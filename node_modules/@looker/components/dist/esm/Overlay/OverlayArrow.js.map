{"version":3,"file":"OverlayArrow.js","names":["styled","css","arrowColor","_t","_","theme","color","colors","OverlayArrow","div","attrs","withConfig","displayName","componentId","_t2"],"sources":["../../../src/Overlay/OverlayArrow.tsx"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type {\n  CompatibleHTMLProps,\n  ExtendedStatefulColor,\n} from '@looker/design-tokens';\nimport styled, { css } from 'styled-components';\n\nexport interface OverlayArrowProps extends CompatibleHTMLProps<HTMLDivElement> {\n  /**\n   *  @default background\n   **/\n  color?: string;\n  ['data-placement']: string;\n}\n\n// If color is a value on theme.colors, use that, e.g. 'key' or 'background'\n// otherwise use the color string directly, e.g. a hex color\nconst arrowColor = css<OverlayArrowProps>`\n  ${({ theme, color = 'background' }) =>\n    theme.colors[color as ExtendedStatefulColor] || color};\n`;\n\nexport const OverlayArrow = styled.div.attrs(() => ({\n  'data-popper-arrow': true,\n  'data-testid': 'overlay-arrow',\n}))<OverlayArrowProps>`\n  position: absolute;\n\n  &::after,\n  &::before {\n    content: '';\n    display: block;\n    height: 0.54rem;\n    width: 0.54rem;\n    border: 0.38rem solid transparent;\n    border-right: 0;\n  }\n  &::after {\n    border-left-color: ${arrowColor};\n  }\n  &::before {\n    position: absolute;\n    border-left-color: rgba(0, 0, 0, 0.15);\n    filter: blur(1px);\n  }\n\n  &[data-placement*='top'] {\n    bottom: -0.125rem;\n    &::after,\n    &::before {\n      transform: rotate(90deg);\n    }\n    &::before {\n      border-left-color: rgba(0, 0, 0, 0.3);\n      bottom: -3px;\n      filter: blur(2px);\n    }\n  }\n\n  &[data-placement*='right'] {\n    left: 0;\n    &::after,\n    &::before {\n      transform: rotate(180deg);\n    }\n    &::before {\n      left: -2px;\n    }\n  }\n\n  &[data-placement*='bottom'] {\n    top: -0.125rem;\n    &::after,\n    &::before {\n      transform: rotate(270deg);\n    }\n    &::before {\n      border-left-color: rgba(0, 0, 0, 0.1);\n      top: -1px;\n      filter: none;\n    }\n  }\n\n  &[data-placement*='left'] {\n    right: 0;\n    &::after,\n    &::before {\n      transform: rotate(0deg);\n    }\n    &::before {\n      right: -2px;\n    }\n  }\n`;\n"],"mappings":";;;AASA,OAAOA,MAAM,IAAIC,GAAG,QAAQ,mBAAmB;AAY/C,MAAMC,UAAU,GAAGD,GAAG,CAAAE,EAAA,KAAAA,EAAA,GAAAC,CAAoB;AAC1C,IAAE,CACwD;AAC1D,IAFI,CAAC;EAAEC,KAAK;EAAEC,KAAK,EAALA,MAAK,GAAG;AAAa,CAAC,KAChCD,KAAK,CAACE,MAAM,CAACD,MAAK,CAA0B,IAAIA,MAAK,CACxD;AAED,OAAO,MAAME,YAAY,GAAGR,MAAM,CAACS,GAAG,CAACC,KAAK,CAAC,OAAO;EAClD,mBAAmB,EAAE,IAAI;EACzB,aAAa,EAAE;AACjB,CAAC,CAAC,CAAC,CAAAC,UAAA;EAAAC,WAAA;EAAAC,WAAA;AAAA,GAAAC,GAAA,KAAAA,GAAA,GAAAV,CAAoB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAuB,CAAa;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAvDyBF,UAAU,CAuDlC"}