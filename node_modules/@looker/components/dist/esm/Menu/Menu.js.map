{"version":3,"file":"Menu.js","names":["React","cloneElement","forwardRef","Popover","popoverPropKeys","useID","MenuList","partitionMenuProps","props","allProps","_objectSpread","popoverProps","forEach","key","undefined","listProps","Menu","_ref","ref","children","content","id","propsID","listRef","restProps","_objectWithoutProperties","_excluded","list","createElement","_extends"],"sources":["../../../src/Menu/Menu.tsx"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type { Ref, ReactElement } from 'react';\nimport React, { cloneElement, forwardRef } from 'react';\nimport type { ListProps } from '../List';\nimport type { PopoverProps, UsePopoverResponseDom } from '../Popover';\nimport { Popover, popoverPropKeys } from '../Popover';\nimport { useID } from '../utils';\nimport { MenuList } from './MenuList';\n\nexport interface MenuDomProps extends UsePopoverResponseDom {\n  'aria-controls': string;\n}\n\nexport interface MenuProps\n  extends Omit<PopoverProps, 'children'>,\n    Omit<ListProps, 'children' | 'content'> {\n  /**\n   * A ReactElement that accepts dom props\n   */\n  children: ReactElement<MenuDomProps>;\n  /**\n   * The ref to be passed to the list element (`ref` is passed to the triggering element)\n   */\n  listRef?: Ref<HTMLUListElement>;\n}\ntype PartitionProps = Omit<\n  MenuProps,\n  'children' | 'content' | 'id' | 'listRef'\n>;\ntype KeyOfPartitionProps = keyof PartitionProps;\n\n// Returns two object, the first being Popover props and the second being List props\nconst partitionMenuProps = (\n  props: PartitionProps,\n  popoverPropKeys: Array<keyof PopoverProps>\n) => {\n  const allProps = { ...props };\n  const popoverProps: Record<string, unknown> = {};\n\n  popoverPropKeys.forEach(key => {\n    if (props[key as KeyOfPartitionProps] !== undefined) {\n      popoverProps[key] = props[key as KeyOfPartitionProps];\n    }\n    delete allProps[key as KeyOfPartitionProps];\n  });\n\n  const listProps = allProps;\n\n  return [popoverProps, listProps];\n};\n\nexport const Menu = forwardRef(\n  (\n    { children, content, id: propsID, listRef, ...restProps }: MenuProps,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ref: Ref<any>\n  ) => {\n    const [popoverProps, listProps] = partitionMenuProps(\n      restProps,\n      popoverPropKeys\n    );\n\n    const id = useID(propsID);\n    const list = content && (\n      <MenuList id={id} {...listProps} ref={listRef} data-autofocus=\"true\">\n        {content}\n      </MenuList>\n    );\n    children = cloneElement(children, { 'aria-controls': id });\n\n    return (\n      <Popover content={list} ref={ref} {...popoverProps}>\n        {children}\n      </Popover>\n    );\n  }\n);\n"],"mappings":";;;;;;;;;AAMA,OAAOA,KAAK,IAAIC,YAAY,EAAEC,UAAU,QAAQ,OAAO;AAGvD,SAASC,OAAO,EAAEC,eAAe,QAAQ,YAAY;AACrD,SAASC,KAAK,QAAQ,UAAU;AAChC,SAASC,QAAQ,QAAQ,YAAY;AAyBrC,MAAMC,kBAAkB,GAAGA,CACzBC,KAAqB,EACrBJ,eAA0C,KACvC;EACH,MAAMK,QAAQ,GAAAC,aAAA,KAAQF,KAAK,CAAE;EAC7B,MAAMG,YAAqC,GAAG,CAAC,CAAC;EAEhDP,eAAe,CAACQ,OAAO,CAACC,GAAG,IAAI;IAC7B,IAAIL,KAAK,CAACK,GAAG,CAAwB,KAAKC,SAAS,EAAE;MACnDH,YAAY,CAACE,GAAG,CAAC,GAAGL,KAAK,CAACK,GAAG,CAAwB;IACvD;IACA,OAAOJ,QAAQ,CAACI,GAAG,CAAwB;EAC7C,CAAC,CAAC;EAEF,MAAME,SAAS,GAAGN,QAAQ;EAE1B,OAAO,CAACE,YAAY,EAAEI,SAAS,CAAC;AAClC,CAAC;AAED,OAAO,MAAMC,IAAI,GAAGd,UAAU,CAC5B,CAAAe,IAAA,EAGEC,GAAa,KACV;EAAA,IAHH;MAAEC,QAAQ;MAAEC,OAAO;MAAEC,EAAE,EAAEC,OAAO;MAAEC;IAAiC,CAAC,GAAAN,IAAA;IAAtBO,SAAS,GAAAC,wBAAA,CAAAR,IAAA,EAAAS,SAAA;EAIvD,MAAM,CAACf,YAAY,EAAEI,SAAS,CAAC,GAAGR,kBAAkB,CAClDiB,SAAS,EACTpB,eACF,CAAC;EAED,MAAMiB,EAAE,GAAGhB,KAAK,CAACiB,OAAO,CAAC;EACzB,MAAMK,IAAI,GAAGP,OAAO,IAClBpB,KAAA,CAAA4B,aAAA,CAACtB,QAAQ,EAAAuB,QAAA;IAACR,EAAE,EAAEA;EAAG,GAAKN,SAAS;IAAEG,GAAG,EAAEK,OAAQ;IAAC,kBAAe;EAAM,IACjEH,OACO,CACX;EACDD,QAAQ,GAAGlB,YAAY,CAACkB,QAAQ,EAAE;IAAE,eAAe,EAAEE;EAAG,CAAC,CAAC;EAE1D,OACErB,KAAA,CAAA4B,aAAA,CAACzB,OAAO,EAAA0B,QAAA;IAACT,OAAO,EAAEO,IAAK;IAACT,GAAG,EAAEA;EAAI,GAAKP,YAAY,GAC/CQ,QACM,CAAC;AAEd,CACF,CAAC"}