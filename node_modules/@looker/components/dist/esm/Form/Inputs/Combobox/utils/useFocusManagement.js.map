{"version":3,"file":"useFocusManagement.js","names":["useEffect","useCallbackRef","ComboboxActionType","useFocusManagement","lastActionType","inputElement","inputCallbackRef","SELECT_WITH_CLICK","INTERACT","focus","scrollLeft"],"sources":["../../../../../../src/Form/Inputs/Combobox/utils/useFocusManagement.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport { useEffect } from 'react';\nimport { useCallbackRef } from '../../../../utils';\nimport { ComboboxActionType } from './state';\n\n// Move focus back to the input if we start navigating w/ the\n// keyboard after focus has moved to any focus-able content in\n// the popup.\n\nexport function useFocusManagement(lastActionType?: ComboboxActionType) {\n  const [inputElement, inputCallbackRef] = useCallbackRef<HTMLInputElement>();\n  useEffect(() => {\n    if (\n      lastActionType === ComboboxActionType.SELECT_WITH_CLICK ||\n      lastActionType === ComboboxActionType.INTERACT\n    ) {\n      if (inputElement) {\n        inputElement.focus();\n        inputElement.scrollLeft = 0;\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [lastActionType]);\n\n  return { inputCallbackRef, inputElement };\n}\n"],"mappings":"AAKA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,cAAc,QAAQ,mBAAmB;AAClD,SAASC,kBAAkB,QAAQ,SAAS;AAM5C,OAAO,SAASC,kBAAkBA,CAACC,cAAmC,EAAE;EACtE,MAAM,CAACC,YAAY,EAAEC,gBAAgB,CAAC,GAAGL,cAAc,CAAmB,CAAC;EAC3ED,SAAS,CAAC,MAAM;IACd,IACEI,cAAc,KAAKF,kBAAkB,CAACK,iBAAiB,IACvDH,cAAc,KAAKF,kBAAkB,CAACM,QAAQ,EAC9C;MACA,IAAIH,YAAY,EAAE;QAChBA,YAAY,CAACI,KAAK,CAAC,CAAC;QACpBJ,YAAY,CAACK,UAAU,GAAG,CAAC;MAC7B;IACF;EAEF,CAAC,EAAE,CAACN,cAAc,CAAC,CAAC;EAEpB,OAAO;IAAEE,gBAAgB;IAAED;EAAa,CAAC;AAC3C"}