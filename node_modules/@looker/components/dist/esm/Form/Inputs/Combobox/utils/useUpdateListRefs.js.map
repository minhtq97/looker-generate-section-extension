{"version":3,"file":"useUpdateListRefs.js","names":["useContext","useSafeLayoutEffect","ComboboxContext","ComboboxMultiContext","useUpdateListRefs","persistSelection","closeOnSelect","windowing","indicator","isMulti","context","contextMulti","contextToUse","persistSelectionPropRef","closeOnSelectPropRef","windowingPropRef","indicatorPropRef","isVisible","optionsRef","current"],"sources":["../../../../../../src/Form/Inputs/Combobox/utils/useUpdateListRefs.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport { useContext } from 'react';\nimport { useSafeLayoutEffect } from '../../../../utils';\nimport { ComboboxContext, ComboboxMultiContext } from '../ComboboxContext';\nimport type { ComboboxListInternalProps } from '../types';\n\nexport const useUpdateListRefs = ({\n  // when true, and the list opens again, the option with a matching value will be\n  // automatically highlighted.\n  persistSelection = false,\n  // closes the list after an option is selected\n  closeOnSelect = true,\n  // disables the optionsRef behavior, to be handled externally (support keyboard nav in long lists)\n  windowing = false,\n  indicator,\n  isMulti,\n}: ComboboxListInternalProps) => {\n  const context = useContext(ComboboxContext);\n  const contextMulti = useContext(ComboboxMultiContext);\n  const contextToUse = isMulti ? contextMulti : context;\n  const {\n    persistSelectionPropRef,\n    closeOnSelectPropRef,\n    windowingPropRef,\n    indicatorPropRef,\n    isVisible,\n    optionsRef,\n  } = contextToUse;\n  // Update context prop refs\n  if (persistSelectionPropRef)\n    persistSelectionPropRef.current = persistSelection;\n  if (closeOnSelectPropRef) closeOnSelectPropRef.current = closeOnSelect;\n  if (indicatorPropRef) indicatorPropRef.current = indicator;\n\n  // WEIRD? Reset the options ref every render so that they are always\n  // accurate and ready for keyboard navigation handlers. Using layout\n  // effect to schedule this effect before the ComboboxOptions push into\n  // the array\n  useSafeLayoutEffect(() => {\n    if (windowingPropRef) windowingPropRef.current = windowing;\n    if (optionsRef) optionsRef.current = [];\n    return () => {\n      if (optionsRef) optionsRef.current = [];\n    };\n    // Without isVisible in the dependency array,\n    // updated options won't go into the optionsRef array\n  }, [optionsRef, isVisible, windowing, windowingPropRef]);\n};\n"],"mappings":"AAKA,SAASA,UAAU,QAAQ,OAAO;AAClC,SAASC,mBAAmB,QAAQ,mBAAmB;AACvD,SAASC,eAAe,EAAEC,oBAAoB,QAAQ,oBAAoB;AAG1E,OAAO,MAAMC,iBAAiB,GAAGA,CAAC;EAGhCC,gBAAgB,EAAhBA,iBAAgB,GAAG,KAAK;EAExBC,aAAa,EAAbA,cAAa,GAAG,IAAI;EAEpBC,SAAS,EAATA,UAAS,GAAG,KAAK;EACjBC,SAAS;EACTC;AACyB,CAAC,KAAK;EAC/B,MAAMC,OAAO,GAAGV,UAAU,CAACE,eAAe,CAAC;EAC3C,MAAMS,YAAY,GAAGX,UAAU,CAACG,oBAAoB,CAAC;EACrD,MAAMS,YAAY,GAAGH,OAAO,GAAGE,YAAY,GAAGD,OAAO;EACrD,MAAM;IACJG,uBAAuB;IACvBC,oBAAoB;IACpBC,gBAAgB;IAChBC,gBAAgB;IAChBC,SAAS;IACTC;EACF,CAAC,GAAGN,YAAY;EAEhB,IAAIC,uBAAuB,EACzBA,uBAAuB,CAACM,OAAO,GAAGd,iBAAgB;EACpD,IAAIS,oBAAoB,EAAEA,oBAAoB,CAACK,OAAO,GAAGb,cAAa;EACtE,IAAIU,gBAAgB,EAAEA,gBAAgB,CAACG,OAAO,GAAGX,SAAS;EAM1DP,mBAAmB,CAAC,MAAM;IACxB,IAAIc,gBAAgB,EAAEA,gBAAgB,CAACI,OAAO,GAAGZ,UAAS;IAC1D,IAAIW,UAAU,EAAEA,UAAU,CAACC,OAAO,GAAG,EAAE;IACvC,OAAO,MAAM;MACX,IAAID,UAAU,EAAEA,UAAU,CAACC,OAAO,GAAG,EAAE;IACzC,CAAC;EAGH,CAAC,EAAE,CAACD,UAAU,EAAED,SAAS,EAAEV,UAAS,EAAEQ,gBAAgB,CAAC,CAAC;AAC1D,CAAC"}