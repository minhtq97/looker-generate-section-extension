{"version":3,"file":"useOptionEvents.js","names":["xorWith","useContext","useWrapEvent","ComboboxActionType","useOptionEvents","props","context","label","payload","value","onClick","onMouseEnter","option","data","onChange","transition","closeOnSelectPropRef","isScrollingRef","options","handleClick","o1","o2","SELECT_WITH_CLICK","current","ESCAPE","handleMouseEnter","requestAnimationFrame","NAVIGATE"],"sources":["../../../../../../src/Form/Inputs/Combobox/utils/useOptionEvents.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport xorWith from 'lodash/xorWith';\nimport type { Context } from 'react';\nimport { useContext } from 'react';\nimport { useWrapEvent } from '../../../../utils';\nimport type {\n  ComboboxContextProps,\n  ComboboxMultiContextProps,\n} from '../ComboboxContext';\nimport type {\n  ComboboxCallback,\n  ComboboxMultiCallback,\n  ComboboxOptionObject,\n  ComboboxOptionProps,\n} from '../types';\nimport type { ComboboxMultiData } from './state';\nimport { ComboboxActionType } from './state';\n\nexport type UseOptionEventsProps = ComboboxOptionObject &\n  Pick<ComboboxOptionProps, 'onClick' | 'onMouseEnter'>;\n\nexport function useOptionEvents<\n  CProps extends ComboboxContextProps | ComboboxMultiContextProps\n>(props: ComboboxOptionProps, context: Context<CProps>) {\n  const { label, payload, value, onClick, onMouseEnter } = props;\n  const option = { label, payload, value };\n\n  const { data, onChange, transition, closeOnSelectPropRef, isScrollingRef } =\n    useContext(context);\n  const { options } = data as ComboboxMultiData;\n\n  function handleClick() {\n    if (onChange) {\n      if (options) {\n        (onChange as ComboboxMultiCallback)(\n          xorWith(options, [option], (o1, o2) => o1.value === o2.value)\n        );\n      } else {\n        (onChange as ComboboxCallback)(option);\n      }\n    }\n    transition && transition(ComboboxActionType.SELECT_WITH_CLICK, { option });\n    if (closeOnSelectPropRef && closeOnSelectPropRef.current) {\n      // Closing an opened list\n      transition && transition(ComboboxActionType.ESCAPE);\n    }\n  }\n\n  const handleMouseEnter = () => {\n    // Wait for isScrollingRef.current to be updated in ComboboxList scrollHandler\n    // (mouseenter event is fired before the scroll event)\n    requestAnimationFrame(() => {\n      if (isScrollingRef?.current) return;\n      transition && transition(ComboboxActionType.NAVIGATE, { option });\n    });\n  };\n\n  return {\n    onClick: useWrapEvent(handleClick, onClick),\n    onMouseEnter: useWrapEvent(handleMouseEnter, onMouseEnter),\n  };\n}\n"],"mappings":"AAKA,OAAOA,OAAO,MAAM,gBAAgB;AAEpC,SAASC,UAAU,QAAQ,OAAO;AAClC,SAASC,YAAY,QAAQ,mBAAmB;AAYhD,SAASC,kBAAkB,QAAQ,SAAS;AAK5C,OAAO,SAASC,eAAeA,CAE7BC,KAA0B,EAAEC,OAAwB,EAAE;EACtD,MAAM;IAAEC,KAAK;IAAEC,OAAO;IAAEC,KAAK;IAAEC,OAAO;IAAEC;EAAa,CAAC,GAAGN,KAAK;EAC9D,MAAMO,MAAM,GAAG;IAAEL,KAAK;IAAEC,OAAO;IAAEC;EAAM,CAAC;EAExC,MAAM;IAAEI,IAAI;IAAEC,QAAQ;IAAEC,UAAU;IAAEC,oBAAoB;IAAEC;EAAe,CAAC,GACxEhB,UAAU,CAACK,OAAO,CAAC;EACrB,MAAM;IAAEY;EAAQ,CAAC,GAAGL,IAAyB;EAE7C,SAASM,WAAWA,CAAA,EAAG;IACrB,IAAIL,QAAQ,EAAE;MACZ,IAAII,OAAO,EAAE;QACVJ,QAAQ,CACPd,OAAO,CAACkB,OAAO,EAAE,CAACN,MAAM,CAAC,EAAE,CAACQ,EAAE,EAAEC,EAAE,KAAKD,EAAE,CAACX,KAAK,KAAKY,EAAE,CAACZ,KAAK,CAC9D,CAAC;MACH,CAAC,MAAM;QACJK,QAAQ,CAAsBF,MAAM,CAAC;MACxC;IACF;IACAG,UAAU,IAAIA,UAAU,CAACZ,kBAAkB,CAACmB,iBAAiB,EAAE;MAAEV;IAAO,CAAC,CAAC;IAC1E,IAAII,oBAAoB,IAAIA,oBAAoB,CAACO,OAAO,EAAE;MAExDR,UAAU,IAAIA,UAAU,CAACZ,kBAAkB,CAACqB,MAAM,CAAC;IACrD;EACF;EAEA,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;IAG7BC,qBAAqB,CAAC,MAAM;MAC1B,IAAIT,cAAc,aAAdA,cAAc,eAAdA,cAAc,CAAEM,OAAO,EAAE;MAC7BR,UAAU,IAAIA,UAAU,CAACZ,kBAAkB,CAACwB,QAAQ,EAAE;QAAEf;MAAO,CAAC,CAAC;IACnE,CAAC,CAAC;EACJ,CAAC;EAED,OAAO;IACLF,OAAO,EAAER,YAAY,CAACiB,WAAW,EAAET,OAAO,CAAC;IAC3CC,YAAY,EAAET,YAAY,CAACuB,gBAAgB,EAAEd,YAAY;EAC3D,CAAC;AACH"}