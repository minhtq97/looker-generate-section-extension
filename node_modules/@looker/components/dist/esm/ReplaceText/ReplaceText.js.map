{"version":3,"file":"ReplaceText.js","names":["React","Children","Fragment","escapeRegExp","Span","DefaultReplace","props","createElement","_extends","fontWeight","textDecoration","ReplaceString","children","match","replace","matchRegExp","RegExp","stringArr","split","map","stringItem","index","key","ReplaceText","_ref","rest","_objectWithoutProperties","_excluded","child"],"sources":["../../../src/ReplaceText/ReplaceText.tsx"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport type { ReactNode } from 'react';\nimport React, { Children, Fragment } from 'react';\nimport escapeRegExp from 'lodash/escapeRegExp';\nimport { Span } from '../Text';\n\nexport type ReplaceProps = {\n  /**\n   * The text that will be highlighted\n   */\n  children: string;\n};\n\nexport type ReplaceComponent = (props: ReplaceProps) => ReactNode;\n\nconst DefaultReplace: ReplaceComponent = (props: ReplaceProps) => (\n  <Span fontWeight=\"semiBold\" textDecoration=\"underline\" {...props} />\n);\n\n// Wraps matched substrings in the replace component\nconst ReplaceString = ({\n  children,\n  match,\n  replace = DefaultReplace,\n}: Omit<ReplaceTextProps, 'children'> & ReplaceProps) => {\n  // Convert match to capturing, case-insensitive, global RegExp\n  const matchRegExp = new RegExp(`(${escapeRegExp(match)})`, 'gi');\n  const stringArr = children.split(matchRegExp);\n\n  // With capturing RegExp + split, captured elements are included in array\n  return (\n    <>\n      {stringArr.map((stringItem: string, index: number) => (\n        <Fragment key={index}>\n          {index % 2 === 1\n            ? replace({ children: stringItem })\n            : stringItem || null}\n        </Fragment>\n      ))}\n    </>\n  );\n};\n\nexport interface ReplaceTextProps {\n  /**\n   * Any non-text children will be passed along as-is\n   */\n  children?: ReactNode | ReactNode[];\n  /**\n   * A string to search for in the children (case-insensitive, global)\n   */\n  match?: string;\n  /**\n   * A component to wrap the matched text. Defaults to a span with semi-bold/underline style.\n   */\n  replace?: ReplaceComponent;\n}\n\nexport const ReplaceText = ({ children, ...rest }: ReplaceTextProps) => {\n  if (!rest.match) return <>{children}</>;\n\n  return (\n    <>\n      {Children.map(children, (child: ReactNode) =>\n        typeof child === 'string' ? (\n          <ReplaceString {...rest}>{child}</ReplaceString>\n        ) : (\n          child\n        )\n      )}\n    </>\n  );\n};\n"],"mappings":";;;;AAKA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,QAAQ,QAAQ,OAAO;AACjD,OAAOC,YAAY,MAAM,qBAAqB;AAC9C,SAASC,IAAI,QAAQ,SAAS;AAW9B,MAAMC,cAAgC,GAAIC,KAAmB,IAC3DN,KAAA,CAAAO,aAAA,CAACH,IAAI,EAAAI,QAAA;EAACC,UAAU,EAAC,UAAU;EAACC,cAAc,EAAC;AAAW,GAAKJ,KAAK,CAAG,CACpE;AAGD,MAAMK,aAAa,GAAGA,CAAC;EACrBC,QAAQ;EACRC,KAAK;EACLC,OAAO,EAAPA,QAAO,GAAGT;AACuC,CAAC,KAAK;EAEvD,MAAMU,WAAW,GAAG,IAAIC,MAAM,CAAE,IAAGb,YAAY,CAACU,KAAK,CAAE,GAAE,EAAE,IAAI,CAAC;EAChE,MAAMI,SAAS,GAAGL,QAAQ,CAACM,KAAK,CAACH,WAAW,CAAC;EAG7C,OACEf,KAAA,CAAAO,aAAA,CAAAP,KAAA,CAAAE,QAAA,QACGe,SAAS,CAACE,GAAG,CAAC,CAACC,UAAkB,EAAEC,KAAa,KAC/CrB,KAAA,CAAAO,aAAA,CAACL,QAAQ;IAACoB,GAAG,EAAED;EAAM,GAClBA,KAAK,GAAG,CAAC,KAAK,CAAC,GACZP,QAAO,CAAC;IAAEF,QAAQ,EAAEQ;EAAW,CAAC,CAAC,GACjCA,UAAU,IAAI,IACV,CACX,CACD,CAAC;AAEP,CAAC;AAiBD,OAAO,MAAMG,WAAW,GAAGC,IAAA,IAA6C;EAAA,IAA5C;MAAEZ;IAAoC,CAAC,GAAAY,IAAA;IAAxBC,IAAI,GAAAC,wBAAA,CAAAF,IAAA,EAAAG,SAAA;EAC7C,IAAI,CAACF,IAAI,CAACZ,KAAK,EAAE,OAAOb,KAAA,CAAAO,aAAA,CAAAP,KAAA,CAAAE,QAAA,QAAGU,QAAW,CAAC;EAEvC,OACEZ,KAAA,CAAAO,aAAA,CAAAP,KAAA,CAAAE,QAAA,QACGD,QAAQ,CAACkB,GAAG,CAACP,QAAQ,EAAGgB,KAAgB,IACvC,OAAOA,KAAK,KAAK,QAAQ,GACvB5B,KAAA,CAAAO,aAAA,CAACI,aAAa,EAAKc,IAAI,EAAGG,KAAqB,CAAC,GAEhDA,KAEJ,CACA,CAAC;AAEP,CAAC"}