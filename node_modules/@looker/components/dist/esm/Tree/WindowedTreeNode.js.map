{"version":3,"file":"WindowedTreeNode.js","names":["React","cloneElement","createContext","isValidElement","useCallback","useContext","TreeCollectionContext","WindowedTreeContext","partialRender","WindowedTreeNode","content","firstIDinWindow","id","items","context","toggleNode","isOpen","_context$toggleNode","call","_context$toggleStateM","props","children","map","item","createElement","_extends","key","toggleStateMap","Provider","value","density"],"sources":["../../../src/Tree/WindowedTreeNode.tsx"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type { DensityProp } from '@looker/design-tokens';\nimport React, {\n  cloneElement,\n  createContext,\n  isValidElement,\n  useCallback,\n  useContext,\n} from 'react';\nimport { TreeCollectionContext } from './TreeCollectionContext';\nimport type { WindowedTreeNodeIDProps } from './types';\n\nexport type WindowedTreeContextProps = DensityProp & {\n  isOpen?: boolean;\n  partialRender: boolean;\n  toggleNode?: (isOpen: boolean) => void;\n};\n\nexport const WindowedTreeContext = createContext<WindowedTreeContextProps>({\n  partialRender: false,\n});\n\nexport const WindowedTreeNode = ({\n  content,\n  firstIDinWindow,\n  id,\n  items,\n}: WindowedTreeNodeIDProps & {\n  firstIDinWindow?: number;\n}) => {\n  // Update state for which tree nodes are opened / closed\n  const context = useContext(TreeCollectionContext);\n  const toggleNode = useCallback(\n    (isOpen: boolean) => {\n      context.toggleNode?.(id, isOpen);\n    },\n    [context, id]\n  );\n\n  if (items && isValidElement(content)) {\n    // insert the items as children\n    const props = {\n      children: items.map(item => (\n        <WindowedTreeNode\n          firstIDinWindow={firstIDinWindow}\n          {...item}\n          key={item.id}\n        />\n      )),\n    };\n    const isOpen = context.toggleStateMap?.[id]?.isOpen;\n\n    return (\n      <WindowedTreeContext.Provider\n        value={{\n          density: context.density,\n          isOpen,\n          partialRender: firstIDinWindow ? id < firstIDinWindow : false,\n          toggleNode,\n        }}\n      >\n        {cloneElement(content, props)}\n      </WindowedTreeContext.Provider>\n    );\n  }\n  return content;\n};\n"],"mappings":";AAMA,OAAOA,KAAK,IACVC,YAAY,EACZC,aAAa,EACbC,cAAc,EACdC,WAAW,EACXC,UAAU,QACL,OAAO;AACd,SAASC,qBAAqB,QAAQ,yBAAyB;AAS/D,OAAO,MAAMC,mBAAmB,GAAGL,aAAa,CAA2B;EACzEM,aAAa,EAAE;AACjB,CAAC,CAAC;AAEF,OAAO,MAAMC,gBAAgB,GAAGA,CAAC;EAC/BC,OAAO;EACPC,eAAe;EACfC,EAAE;EACFC;AAGF,CAAC,KAAK;EAEJ,MAAMC,OAAO,GAAGT,UAAU,CAACC,qBAAqB,CAAC;EACjD,MAAMS,UAAU,GAAGX,WAAW,CAC3BY,MAAe,IAAK;IAAA,IAAAC,mBAAA;IACnB,CAAAA,mBAAA,GAAAH,OAAO,CAACC,UAAU,cAAAE,mBAAA,uBAAlBA,mBAAA,CAAAC,IAAA,CAAAJ,OAAO,EAAcF,EAAE,EAAEI,MAAM,CAAC;EAClC,CAAC,EACD,CAACF,OAAO,EAAEF,EAAE,CACd,CAAC;EAED,IAAIC,KAAK,IAAIV,cAAc,CAACO,OAAO,CAAC,EAAE;IAAA,IAAAS,qBAAA;IAEpC,MAAMC,KAAK,GAAG;MACZC,QAAQ,EAAER,KAAK,CAACS,GAAG,CAACC,IAAI,IACtBvB,KAAA,CAAAwB,aAAA,CAACf,gBAAgB,EAAAgB,QAAA;QACfd,eAAe,EAAEA;MAAgB,GAC7BY,IAAI;QACRG,GAAG,EAAEH,IAAI,CAACX;MAAG,EACd,CACF;IACH,CAAC;IACD,MAAMI,MAAM,IAAAG,qBAAA,GAAGL,OAAO,CAACa,cAAc,cAAAR,qBAAA,gBAAAA,qBAAA,GAAtBA,qBAAA,CAAyBP,EAAE,CAAC,cAAAO,qBAAA,uBAA5BA,qBAAA,CAA8BH,MAAM;IAEnD,OACEhB,KAAA,CAAAwB,aAAA,CAACjB,mBAAmB,CAACqB,QAAQ;MAC3BC,KAAK,EAAE;QACLC,OAAO,EAAEhB,OAAO,CAACgB,OAAO;QACxBd,MAAM;QACNR,aAAa,EAAEG,eAAe,GAAGC,EAAE,GAAGD,eAAe,GAAG,KAAK;QAC7DI;MACF;IAAE,GAEDd,YAAY,CAACS,OAAO,EAAEU,KAAK,CACA,CAAC;EAEnC;EACA,OAAOV,OAAO;AAChB,CAAC"}