{"version":3,"file":"useDialog.js","names":["React","useState","Portal","useAnimationState","useControlWarn","useFocusTrap","useID","useScrollLock","Backdrop","DialogContext","DialogSurface","useDialog","_ref","content","defaultOpen","isOpen","controlledIsOpen","canClose","onAfterClose","onAfterOpen","onClose","setOpen","controlledSetOpen","Surface","CustomSurface","placement","id","surfaceProps","_objectWithoutProperties","_excluded","uncontrolledIsOpen","setUncontrolledIsOpen","isControlled","controllingProps","isControlledCheck","undefined","name","Boolean","Error","isPartiallyControlled","busy","className","renderDOM","enter","onAfterEntered","onAfterExited","focusRef","clickOutsideDeactivates","portalRef","ref","handleOpen","handleClose","RenderSurface","dialogId","dialog","createElement","Provider","value","closeModal","onClick","_extends","domProps","role"],"sources":["../../../src/Dialog/useDialog.tsx"],"sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport type { ReactNode } from 'react';\nimport React, { useState } from 'react';\nimport type {\n  DrawerPlacements,\n  DialogDrawerWidth,\n} from '../Drawer/DrawerSurface';\nimport { Portal } from '../Portal';\nimport {\n  useAnimationState,\n  useControlWarn,\n  useFocusTrap,\n  useID,\n  useScrollLock,\n} from '../utils';\nimport { Backdrop } from './Backdrop';\nimport { DialogContext } from './DialogContext';\nimport type { DialogSurfaceProps, DialogPlacements } from './DialogSurface';\nimport { DialogSurface } from './DialogSurface';\nimport type { DialogWidth } from './dialogWidth';\n\nexport interface UseDialogBaseProps {\n  /**\n   * Specify a callback to be called before trying to close the Popover. This allows for\n   * use-cases where the user might lose work (think common \"Save before closing warning\" type flow)\n   * Specify a callback to be called each time this Popover is closed\n   */\n  canClose?: () => boolean;\n\n  /**\n   * Content to rendered within the Dialog surface.\n   * @required\n   */\n  content: ReactNode;\n\n  /**\n   * Dialog will be displayed immediately when rendered.\n   * NOTE: Once rendered, changes to this value will be ignored. This property cannot\n   * be used treat this component as \"controlled\"\n   * @default false\n   */\n  defaultOpen?: boolean;\n\n  /**\n   * The id of the dialog (if absent, a random id will be generated)\n   */\n  id?: string;\n\n  /**\n   * Dialog will be displayed immediately when rendered.\n   * @default undefined\n   */\n  isOpen?: boolean;\n\n  /**\n   * function available after dialog is closed\n   */\n  onAfterClose?: () => void;\n\n  /**\n   * function available after dialog is opened\n   */\n  onAfterOpen?: () => void;\n\n  /**\n   * Specify a callback to be called each time this Dialog is closed\n   */\n  onClose?: () => void;\n\n  /**\n   * Optional, for a controlled version of the component\n   */\n  setOpen?: (open: boolean) => void;\n}\n\nexport interface UseDialogProps extends UseDialogBaseProps, DialogSurfaceProps {\n  /**\n   * Specify a custom surface to use for Dialog surface.\n   * This is intended for internal components use only (specifically `Drawer`)\n   * @private\n   */\n  Surface?: React.ComponentType;\n}\n\nexport interface UseDialogPropsInternal\n  extends Omit<UseDialogProps, 'placement' | 'width'> {\n  placement?: DialogPlacements | DrawerPlacements;\n  width?: DialogWidth | DialogDrawerWidth;\n}\n\nexport interface UseDialogResponseDom {\n  onClick: () => void;\n  role: string;\n  'aria-expanded': boolean;\n}\n\nexport interface UseDialogResponse {\n  isOpen: boolean;\n  setOpen: (open: boolean) => void;\n  dialog: ReactNode;\n  domProps: UseDialogResponseDom;\n}\n\nexport const useDialog = ({\n  content,\n  defaultOpen = false,\n  isOpen: controlledIsOpen,\n  canClose,\n  onAfterClose,\n  onAfterOpen,\n  onClose,\n  setOpen: controlledSetOpen,\n  Surface: CustomSurface,\n  placement,\n  id,\n  ...surfaceProps\n}: UseDialogPropsInternal): UseDialogResponse => {\n  const [uncontrolledIsOpen, setUncontrolledIsOpen] = useState(defaultOpen);\n  const isControlled = useControlWarn({\n    controllingProps: ['setOpen'],\n    isControlledCheck: () => controlledSetOpen !== undefined,\n    name: 'useDialog',\n  });\n\n  if (Boolean(onClose) && Boolean(controlledSetOpen)) {\n    // eslint-disable-next-line no-console\n    throw new Error(\n      'useDialog does not support setting both `setOpen` and `onClose`. Use just `setOpen`'\n    );\n  }\n\n  /**\n   * LEGACY SUPPORT\n   * Eventually we need to deprecate support for `isOpen` without specifying a `setOpen`\n   *  explicitly so we can unwind this semi-controlled state.\n   */\n  const isPartiallyControlled = controlledIsOpen !== undefined;\n\n  const isOpen =\n    isPartiallyControlled || isControlled\n      ? controlledIsOpen || false\n      : uncontrolledIsOpen;\n\n  const { busy, className, renderDOM } = useAnimationState({\n    enter: defaultOpen ? 'none' : undefined,\n    isOpen,\n    onAfterEntered: onAfterOpen,\n    onAfterExited: onAfterClose,\n  });\n\n  const setOpen =\n    isControlled && controlledSetOpen\n      ? controlledSetOpen\n      : setUncontrolledIsOpen;\n\n  const [, focusRef] = useFocusTrap({ clickOutsideDeactivates: true });\n  const [, portalRef] = useScrollLock({ ref: focusRef });\n\n  const handleOpen = () => setOpen(true);\n\n  const handleClose = () => {\n    if (canClose && !canClose()) return;\n    setOpen(false);\n    onClose && onClose();\n  };\n\n  const RenderSurface = CustomSurface || DialogSurface;\n\n  const dialogId = useID(id);\n\n  const dialog = renderDOM && (\n    <DialogContext.Provider\n      value={{\n        busy,\n        closeModal: handleClose,\n        id: dialogId,\n      }}\n    >\n      <Portal ref={portalRef}>\n        <Backdrop className={className} onClick={handleClose} />\n        <RenderSurface\n          id={dialogId}\n          aria-labelledby={`${dialogId}-heading`}\n          aria-busy={busy ? true : undefined}\n          className={className}\n          placement={placement as DialogPlacements}\n          {...surfaceProps}\n        >\n          {content}\n        </RenderSurface>\n      </Portal>\n    </DialogContext.Provider>\n  );\n\n  return {\n    dialog,\n    domProps: {\n      'aria-expanded': isOpen,\n      onClick: handleOpen,\n      role: 'button',\n    },\n    isOpen,\n    setOpen,\n  };\n};\n"],"mappings":"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"}