{"version":3,"file":"useBoundedRipple.js","names":["useMeasuredElement","useCallbackRef","useRipple","useBoundedRipple","_ref","ref","forwardedRef","props","_objectWithoutProperties","_excluded","element","height","width","result","_objectSpread","bounded"],"sources":["../../../src/Ripple/useBoundedRipple.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport { useMeasuredElement, useCallbackRef } from '../utils';\nimport { useRipple } from './useRipple';\nimport type { UseBoundedRippleProps, UseBoundedRippleResponse } from './types';\n\n/**\n * @returns callbacks should be mapped to DOM event handlers (see useRippleHandlers)\n * and remaining props should be passed to an internal element that includes rippleStyle\n */\nexport const useBoundedRipple = <T extends HTMLElement = HTMLElement>({\n  ref: forwardedRef,\n  ...props\n}: UseBoundedRippleProps<T>): UseBoundedRippleResponse<T> => {\n  const [element, ref] = useCallbackRef(forwardedRef);\n  const [{ height, width }] = useMeasuredElement(element);\n  const result = useRipple({ ...props, bounded: true, height, width });\n  return { ...result, ref };\n};\n"],"mappings":";;;;;;;;AAIA,SAASA,kBAAkB,EAAEC,cAAc,QAAQ,UAAU;AAC7D,SAASC,SAAS,QAAQ,aAAa;AAOvC,OAAO,MAAMC,gBAAgB,GAAGC,IAAA,IAG6B;EAAA,IAHS;MACpEC,GAAG,EAAEC;IAEmB,CAAC,GAAAF,IAAA;IADtBG,KAAK,GAAAC,wBAAA,CAAAJ,IAAA,EAAAK,SAAA;EAER,MAAM,CAACC,OAAO,EAAEL,GAAG,CAAC,GAAGJ,cAAc,CAACK,YAAY,CAAC;EACnD,MAAM,CAAC;IAAEK,MAAM;IAAEC;EAAM,CAAC,CAAC,GAAGZ,kBAAkB,CAACU,OAAO,CAAC;EACvD,MAAMG,MAAM,GAAGX,SAAS,CAAAY,aAAA,CAAAA,aAAA,KAAMP,KAAK;IAAEQ,OAAO,EAAE,IAAI;IAAEJ,MAAM;IAAEC;EAAK,EAAE,CAAC;EACpE,OAAAE,aAAA,CAAAA,aAAA,KAAYD,MAAM;IAAER;EAAG;AACzB,CAAC"}