{"version":3,"file":"truncate.js","names":["css","textTruncate","props","truncateLines","_t","_","_t2","truncateCSS","_t3","truncate"],"sources":["../../../src/Text/truncate.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport { css } from 'styled-components';\n\nexport interface TruncateCSSProps {\n  /** Truncate text */\n  truncate?: boolean;\n  /** Truncate at a specified number of lines (whole number) */\n  truncateLines?: number;\n}\n\nconst textTruncate = (props: TruncateCSSProps) => {\n  const { truncateLines } = props;\n\n  if (truncateLines && truncateLines > 1) {\n    // Despite the vendor prefixes below, this works in all modern browsers\n    return css`\n      /* stylelint-disable value-no-vendor-prefix, property-no-vendor-prefix */\n      -webkit-box-orient: vertical;\n      display: -webkit-box;\n      -webkit-line-clamp: ${truncateLines};\n      overflow: hidden;\n      /* stylelint-enable */\n    `;\n  }\n  return css`\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n  `;\n};\n\n/**\n * Helper function that allows external developers\n * to leverage `textTruncate` behavior as a CSS interpolated\n * string\n */\nexport const truncateCSS = (props: TruncateCSSProps) =>\n  css`\n    ${props.truncate || props.truncateLines ? textTruncate : null}\n  `;\n"],"mappings":";;;;AAKA,SAASA,GAAG,QAAQ,mBAAmB;AASvC,MAAMC,YAAY,GAAIC,KAAuB,IAAK;EAChD,MAAM;IAAEC;EAAc,CAAC,GAAGD,KAAK;EAE/B,IAAIC,aAAa,IAAIA,aAAa,GAAG,CAAC,EAAE;IAEtC,OAAOH,GAAG,CAAAI,EAAA,KAAAA,EAAA,GAAAC,CAAC;AACf;AACA;AACA;AACA,4BAA0B,CAAgB;AAC1C;AACA;AACA,KAAI,GAHwBF,aAAa;EAIvC;EACA,OAAOH,GAAG,CAAAM,GAAA,KAAAA,GAAA,GAAAD,CAAC;AACb;AACA;AACA;AACA,GAAE;AACF,CAAC;AAOD,OAAO,MAAME,WAAW,GAAIL,KAAuB,IACjDF,GAAG,CAAAQ,GAAA,KAAAA,GAAA,GAAAH,CAAC;AACN,MAAI,CAA8D;AAClE,GAAE,GADIH,KAAK,CAACO,QAAQ,IAAIP,KAAK,CAACC,aAAa,GAAGF,YAAY,GAAG,IAAI,CAC9D"}