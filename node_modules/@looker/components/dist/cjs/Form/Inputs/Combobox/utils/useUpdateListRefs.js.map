{"version":3,"file":"useUpdateListRefs.js","names":["_react","require","_utils","_ComboboxContext","useUpdateListRefs","_ref","_ref$persistSelection","persistSelection","_ref$closeOnSelect","closeOnSelect","_ref$windowing","windowing","indicator","isMulti","context","useContext","ComboboxContext","contextMulti","ComboboxMultiContext","contextToUse","persistSelectionPropRef","closeOnSelectPropRef","windowingPropRef","indicatorPropRef","isVisible","optionsRef","current","useSafeLayoutEffect","exports"],"sources":["../../../../../../src/Form/Inputs/Combobox/utils/useUpdateListRefs.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport { useContext } from 'react';\nimport { useSafeLayoutEffect } from '../../../../utils';\nimport { ComboboxContext, ComboboxMultiContext } from '../ComboboxContext';\nimport type { ComboboxListInternalProps } from '../types';\n\nexport const useUpdateListRefs = ({\n  // when true, and the list opens again, the option with a matching value will be\n  // automatically highlighted.\n  persistSelection = false,\n  // closes the list after an option is selected\n  closeOnSelect = true,\n  // disables the optionsRef behavior, to be handled externally (support keyboard nav in long lists)\n  windowing = false,\n  indicator,\n  isMulti,\n}: ComboboxListInternalProps) => {\n  const context = useContext(ComboboxContext);\n  const contextMulti = useContext(ComboboxMultiContext);\n  const contextToUse = isMulti ? contextMulti : context;\n  const {\n    persistSelectionPropRef,\n    closeOnSelectPropRef,\n    windowingPropRef,\n    indicatorPropRef,\n    isVisible,\n    optionsRef,\n  } = contextToUse;\n  // Update context prop refs\n  if (persistSelectionPropRef)\n    persistSelectionPropRef.current = persistSelection;\n  if (closeOnSelectPropRef) closeOnSelectPropRef.current = closeOnSelect;\n  if (indicatorPropRef) indicatorPropRef.current = indicator;\n\n  // WEIRD? Reset the options ref every render so that they are always\n  // accurate and ready for keyboard navigation handlers. Using layout\n  // effect to schedule this effect before the ComboboxOptions push into\n  // the array\n  useSafeLayoutEffect(() => {\n    if (windowingPropRef) windowingPropRef.current = windowing;\n    if (optionsRef) optionsRef.current = [];\n    return () => {\n      if (optionsRef) optionsRef.current = [];\n    };\n    // Without isVisible in the dependency array,\n    // updated options won't go into the optionsRef array\n  }, [optionsRef, isVisible, windowing, windowingPropRef]);\n};\n"],"mappings":";;;;;;AAKA,IAAAA,MAAA,GAAAC,OAAA;AACA,IAAAC,MAAA,GAAAD,OAAA;AACA,IAAAE,gBAAA,GAAAF,OAAA;AAGO,IAAMG,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAAC,IAAA,EAUG;EAAA,IAAAC,qBAAA,GAAAD,IAAA,CAP/BE,gBAAgB;IAAhBA,gBAAgB,GAAAD,qBAAA,cAAG,KAAK,GAAAA,qBAAA;IAAAE,kBAAA,GAAAH,IAAA,CAExBI,aAAa;IAAbA,aAAa,GAAAD,kBAAA,cAAG,IAAI,GAAAA,kBAAA;IAAAE,cAAA,GAAAL,IAAA,CAEpBM,SAAS;IAATA,SAAS,GAAAD,cAAA,cAAG,KAAK,GAAAA,cAAA;IACjBE,SAAS,GAAAP,IAAA,CAATO,SAAS;IACTC,OAAO,GAAAR,IAAA,CAAPQ,OAAO;EAEP,IAAMC,OAAO,GAAG,IAAAC,iBAAU,EAACC,gCAAe,CAAC;EAC3C,IAAMC,YAAY,GAAG,IAAAF,iBAAU,EAACG,qCAAoB,CAAC;EACrD,IAAMC,YAAY,GAAGN,OAAO,GAAGI,YAAY,GAAGH,OAAO;EACrD,IACEM,uBAAuB,GAMrBD,YAAY,CANdC,uBAAuB;IACvBC,oBAAoB,GAKlBF,YAAY,CALdE,oBAAoB;IACpBC,gBAAgB,GAIdH,YAAY,CAJdG,gBAAgB;IAChBC,gBAAgB,GAGdJ,YAAY,CAHdI,gBAAgB;IAChBC,SAAS,GAEPL,YAAY,CAFdK,SAAS;IACTC,UAAU,GACRN,YAAY,CADdM,UAAU;EAGZ,IAAIL,uBAAuB,EACzBA,uBAAuB,CAACM,OAAO,GAAGnB,gBAAgB;EACpD,IAAIc,oBAAoB,EAAEA,oBAAoB,CAACK,OAAO,GAAGjB,aAAa;EACtE,IAAIc,gBAAgB,EAAEA,gBAAgB,CAACG,OAAO,GAAGd,SAAS;EAM1D,IAAAe,0BAAmB,EAAC,YAAM;IACxB,IAAIL,gBAAgB,EAAEA,gBAAgB,CAACI,OAAO,GAAGf,SAAS;IAC1D,IAAIc,UAAU,EAAEA,UAAU,CAACC,OAAO,GAAG,EAAE;IACvC,OAAO,YAAM;MACX,IAAID,UAAU,EAAEA,UAAU,CAACC,OAAO,GAAG,EAAE;IACzC,CAAC;EAGH,CAAC,EAAE,CAACD,UAAU,EAAED,SAAS,EAAEb,SAAS,EAAEW,gBAAgB,CAAC,CAAC;AAC1D,CAAC;AAACM,OAAA,CAAAxB,iBAAA,GAAAA,iBAAA"}