{"version":3,"file":"sort_utils.js","names":["stringComparator","stringA","stringB","upperCasedStringA","toUpperCase","upperCasedStringB","exports","dateComparator","dateA","dateB","doDataTableSort","data","columns","id","sortDirection","sortedData","_toConsumableArray","updatedColumns","targetColumn","find","column","forEach","type","sort","a","b"],"sources":["../../../../src/DataTable/utils/sort_utils.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type { DataTableColumns } from '../Column';\n\nexport const stringComparator = (stringA: string, stringB: string) => {\n  const upperCasedStringA = stringA.toUpperCase();\n  const upperCasedStringB = stringB.toUpperCase();\n\n  if (upperCasedStringA < upperCasedStringB) return -1;\n  if (upperCasedStringA > upperCasedStringB) return 1;\n  return 0;\n};\n\nexport const dateComparator = (dateA: Date, dateB: Date) => {\n  if (dateA < dateB) return -1;\n  if (dateA > dateB) return 1;\n  return 0;\n};\n\n// Guy Ellis 2022-09-23 - The data table sorting is based on a DataTableColumnType which is either undefined or\n// one of \"string\" | \"number\" | \"date\". The comparator in the sort method is based on the data type.\n// However, there is no strong typing between the data and the \"type\". In other words, even if the\n// type says \"number\" we have no TypeScript verifiable way to ensure that the associated data is a number.\n// Of course, we can do type narrowing at each instance usage but that would then risk unanticipated runtime\n// errors if there were a non-match that still currently provided the user with some functionality even though\n// that might not be perfectly correct.\n// At some point in the future we might want to split doDataTableSort() into 3 methods that each operate on a\n// given data type or we might want to pass the comparator() method as a parameter. This would allow up to\n// remove the no-explicit-any disable. b/201417582\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type DataTableDatum = Record<string, any>;\nexport type DataTableData = DataTableDatum[];\n\nexport const doDataTableSort = <T>(\n  data: T[],\n  columns: DataTableColumns,\n  id: string,\n  sortDirection: 'asc' | 'desc'\n) => {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const sortedData: Array<{ [key: string]: any }> = [...data];\n  const updatedColumns = [...columns];\n  const targetColumn = updatedColumns.find(column => column.id === id);\n\n  // The default sort behavior only allows for one column to appear sorted at a time\n  // Using delete operator to clean out all sortDirection properties in our columns array\n  columns.forEach(column => delete column.sortDirection);\n  if (targetColumn) {\n    if (targetColumn.type === 'number') {\n      if (sortDirection === 'desc') {\n        sortedData.sort((a, b) => b[id] - a[id]);\n      } else {\n        sortedData.sort((a, b) => a[id] - b[id]);\n      }\n    } else if (targetColumn.type === 'date') {\n      if (sortDirection === 'desc') {\n        sortedData.sort((a, b) => dateComparator(b[id], a[id]));\n      } else {\n        sortedData.sort((a, b) => dateComparator(a[id], b[id]));\n      }\n    } else {\n      if (sortDirection === 'desc') {\n        sortedData.sort((a, b) => stringComparator(b[id], a[id]));\n      } else {\n        sortedData.sort((a, b) => stringComparator(a[id], b[id]));\n      }\n    }\n    targetColumn.sortDirection = sortDirection;\n  }\n\n  return {\n    columns: updatedColumns,\n    data: sortedData as T[],\n  };\n};\n"],"mappings":"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"}