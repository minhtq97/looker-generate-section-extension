{"version":3,"file":"generateTreeBorder.js","names":["_styledComponents","require","_ListItem","_templateObject","_taggedTemplateLiteral","strings","raw","slice","Object","freeze","defineProperties","value","getColor","theme","color","isListColor","colors","concat","ui2","generateTreeBorder","_ref","border","density","_ref$depth","depth","_listItemDimensions","listItemDimensions","defaults","iconSize","itemBorderSize","itemGutter","indicatorIconSize","sizes","depthSize","borderSpacer","preBorderStop","postBorderStop","css","exports"],"sources":["../../../../src/Tree/utils/generateTreeBorder.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport { css } from 'styled-components';\nimport type { DensityRamp, Theme } from '@looker/design-tokens';\nimport { isListColor, listItemDimensions } from '../../ListItem';\n\nexport type TreeBorderProps = {\n  border?: boolean;\n  color?: string;\n  density?: DensityRamp;\n  depth?: number;\n  theme: Theme;\n};\n\nconst getColor = (theme: Theme, color?: string): string => {\n  if (isListColor(color)) {\n    return theme.colors[`${color}Focus`];\n  }\n  return color || theme.colors.ui2;\n};\n\n/**\n * Creates a vertical \"border\" for Tree's content container if border is true\n * Testing note: style rules validated by storyshots\n */\nexport const generateTreeBorder = ({\n  border,\n  color,\n  density,\n  theme,\n  depth = 0,\n}: TreeBorderProps) => {\n  if (!border) return false;\n\n  const { iconSize } = listItemDimensions(density || theme.defaults.density);\n\n  const itemBorderSize = '1px';\n  const itemGutter = '0.25rem';\n  const indicatorIconSize = theme.sizes[iconSize];\n  const depthSize = `(${indicatorIconSize} + ${itemGutter}) * ${depth}`;\n  const borderSpacer = `(${indicatorIconSize} + ${itemBorderSize}) / 2 + ${depthSize}`;\n\n  const preBorderStop = `calc(${borderSpacer} - ${itemBorderSize})`;\n  const postBorderStop = `calc(${borderSpacer})`;\n\n  return css`\n    background-image: linear-gradient(\n      90deg,\n      transparent ${preBorderStop},\n      ${getColor(theme, color)} ${preBorderStop} ${postBorderStop},\n      transparent ${postBorderStop}\n    );\n  `;\n};\n"],"mappings":";;;;;;AAKA,IAAAA,iBAAA,GAAAC,OAAA;AAEA,IAAAC,SAAA,GAAAD,OAAA;AAAiE,IAAAE,eAAA;AAAA,SAAAC,uBAAAC,OAAA,EAAAC,GAAA,SAAAA,GAAA,IAAAA,GAAA,GAAAD,OAAA,CAAAE,KAAA,cAAAC,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAE,gBAAA,CAAAL,OAAA,IAAAC,GAAA,IAAAK,KAAA,EAAAH,MAAA,CAAAC,MAAA,CAAAH,GAAA;AAUjE,IAAMM,QAAQ,GAAG,SAAXA,QAAQA,CAAIC,KAAY,EAAEC,KAAc,EAAa;EACzD,IAAI,IAAAC,qBAAW,EAACD,KAAK,CAAC,EAAE;IACtB,OAAOD,KAAK,CAACG,MAAM,IAAAC,MAAA,CAAIH,KAAK,WAAQ;EACtC;EACA,OAAOA,KAAK,IAAID,KAAK,CAACG,MAAM,CAACE,GAAG;AAClC,CAAC;AAMM,IAAMC,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAAC,IAAA,EAMR;EAAA,IALrBC,MAAM,GAAAD,IAAA,CAANC,MAAM;IACNP,KAAK,GAAAM,IAAA,CAALN,KAAK;IACLQ,OAAO,GAAAF,IAAA,CAAPE,OAAO;IACPT,KAAK,GAAAO,IAAA,CAALP,KAAK;IAAAU,UAAA,GAAAH,IAAA,CACLI,KAAK;IAALA,KAAK,GAAAD,UAAA,cAAG,CAAC,GAAAA,UAAA;EAET,IAAI,CAACF,MAAM,EAAE,OAAO,KAAK;EAEzB,IAAAI,mBAAA,GAAqB,IAAAC,4BAAkB,EAACJ,OAAO,IAAIT,KAAK,CAACc,QAAQ,CAACL,OAAO,CAAC;IAAlEM,QAAQ,GAAAH,mBAAA,CAARG,QAAQ;EAEhB,IAAMC,cAAc,GAAG,KAAK;EAC5B,IAAMC,UAAU,GAAG,SAAS;EAC5B,IAAMC,iBAAiB,GAAGlB,KAAK,CAACmB,KAAK,CAACJ,QAAQ,CAAC;EAC/C,IAAMK,SAAS,OAAAhB,MAAA,CAAOc,iBAAiB,SAAAd,MAAA,CAAMa,UAAU,UAAAb,MAAA,CAAOO,KAAK,CAAE;EACrE,IAAMU,YAAY,OAAAjB,MAAA,CAAOc,iBAAiB,SAAAd,MAAA,CAAMY,cAAc,cAAAZ,MAAA,CAAWgB,SAAS,CAAE;EAEpF,IAAME,aAAa,WAAAlB,MAAA,CAAWiB,YAAY,SAAAjB,MAAA,CAAMY,cAAc,MAAG;EACjE,IAAMO,cAAc,WAAAnB,MAAA,CAAWiB,YAAY,MAAG;EAE9C,WAAOG,qBAAG,EAAAlC,eAAA,KAAAA,eAAA,GAAAC,sBAAA,mJAGQ+B,aAAa,EACzBvB,QAAQ,CAACC,KAAK,EAAEC,KAAK,CAAC,EAAIqB,aAAa,EAAIC,cAAc,EAC7CA,cAAc;AAGlC,CAAC;AAACE,OAAA,CAAAnB,kBAAA,GAAAA,kBAAA"}