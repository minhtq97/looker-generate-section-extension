{"version":3,"file":"ReplaceText.js","names":["_react","_interopRequireWildcard","require","_escapeRegExp","_interopRequireDefault","_Text","_excluded","obj","__esModule","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","_typeof","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_objectWithoutProperties","source","excluded","target","_objectWithoutPropertiesLoose","i","getOwnPropertySymbols","sourceSymbolKeys","length","indexOf","propertyIsEnumerable","sourceKeys","keys","_extends","assign","bind","arguments","apply","DefaultReplace","props","createElement","Span","fontWeight","textDecoration","ReplaceString","_ref","children","match","_ref$replace","replace","matchRegExp","RegExp","concat","escapeRegExp","stringArr","split","Fragment","map","stringItem","index","ReplaceText","_ref2","rest","Children","child","exports"],"sources":["../../../src/ReplaceText/ReplaceText.tsx"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport type { ReactNode } from 'react';\nimport React, { Children, Fragment } from 'react';\nimport escapeRegExp from 'lodash/escapeRegExp';\nimport { Span } from '../Text';\n\nexport type ReplaceProps = {\n  /**\n   * The text that will be highlighted\n   */\n  children: string;\n};\n\nexport type ReplaceComponent = (props: ReplaceProps) => ReactNode;\n\nconst DefaultReplace: ReplaceComponent = (props: ReplaceProps) => (\n  <Span fontWeight=\"semiBold\" textDecoration=\"underline\" {...props} />\n);\n\n// Wraps matched substrings in the replace component\nconst ReplaceString = ({\n  children,\n  match,\n  replace = DefaultReplace,\n}: Omit<ReplaceTextProps, 'children'> & ReplaceProps) => {\n  // Convert match to capturing, case-insensitive, global RegExp\n  const matchRegExp = new RegExp(`(${escapeRegExp(match)})`, 'gi');\n  const stringArr = children.split(matchRegExp);\n\n  // With capturing RegExp + split, captured elements are included in array\n  return (\n    <>\n      {stringArr.map((stringItem: string, index: number) => (\n        <Fragment key={index}>\n          {index % 2 === 1\n            ? replace({ children: stringItem })\n            : stringItem || null}\n        </Fragment>\n      ))}\n    </>\n  );\n};\n\nexport interface ReplaceTextProps {\n  /**\n   * Any non-text children will be passed along as-is\n   */\n  children?: ReactNode | ReactNode[];\n  /**\n   * A string to search for in the children (case-insensitive, global)\n   */\n  match?: string;\n  /**\n   * A component to wrap the matched text. Defaults to a span with semi-bold/underline style.\n   */\n  replace?: ReplaceComponent;\n}\n\nexport const ReplaceText = ({ children, ...rest }: ReplaceTextProps) => {\n  if (!rest.match) return <>{children}</>;\n\n  return (\n    <>\n      {Children.map(children, (child: ReactNode) =>\n        typeof child === 'string' ? (\n          <ReplaceString {...rest}>{child}</ReplaceString>\n        ) : (\n          child\n        )\n      )}\n    </>\n  );\n};\n"],"mappings":"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"}