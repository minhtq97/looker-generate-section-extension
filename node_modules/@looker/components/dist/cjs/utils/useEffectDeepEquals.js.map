{"version":3,"file":"useEffectDeepEquals.js","names":["_react","_interopRequireDefault","require","_isEqual","obj","__esModule","_typeof","Symbol","iterator","constructor","prototype","checkDeps","deps","length","Error","every","isPrimitive","val","test","useDeepCompareMemoize","value","ref","React","useRef","signalRef","isEqual","current","useMemo","useEffectDeepEquals","callback","dependencies","process","env","NODE_ENV","useEffect","exports"],"sources":["../../../src/utils/useEffectDeepEquals.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React from 'react';\nimport isEqual from 'lodash/isEqual';\n\ntype UseEffectParams = Parameters<typeof React.useEffect>;\ntype EffectCallback = UseEffectParams[0];\ntype DependencyList = UseEffectParams[1];\n\nfunction checkDeps(deps: DependencyList) {\n  if (!deps || !deps.length) {\n    throw new Error(\n      'useEffectDeepEquals should not be used with no dependencies. Use React.useEffect instead.'\n    );\n  }\n  if (deps.every(isPrimitive)) {\n    throw new Error(\n      'useEffectDeepEquals should not be used with dependencies that are all primitive values. Use React.useEffect instead.'\n    );\n  }\n}\n\nfunction isPrimitive(val: unknown) {\n  return val == null || /^[sbn]/.test(typeof val);\n}\n\n/**\n * @param value the value to be memoized (usually a dependency list)\n * @returns a memoized version of the value as long as it remains deeply equal\n */\nexport function useDeepCompareMemoize<T>(value: T) {\n  const ref = React.useRef<T>(value);\n  const signalRef = React.useRef<number>(0);\n\n  if (!isEqual(value, ref.current)) {\n    ref.current = value;\n    signalRef.current += 1;\n  }\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return React.useMemo(() => ref.current, [signalRef.current]);\n}\n\n/**\n * An alternative rewrite to useEffect for situations where you need\n * to compare complex, deeply nested objects in the dependency array.\n *\n * @param callback function to call when dependencies change\n * @param dependencies an array of objects to compare\n */\n\nexport const useEffectDeepEquals = (\n  callback: EffectCallback,\n  dependencies: DependencyList\n): void => {\n  if (process.env.NODE_ENV !== 'production') {\n    checkDeps(dependencies);\n  }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return React.useEffect(callback, useDeepCompareMemoize(dependencies));\n};\n"],"mappings":";;;;;;;AAKA,IAAAA,MAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,QAAA,GAAAF,sBAAA,CAAAC,OAAA;AAAqC,SAAAD,uBAAAG,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,gBAAAA,GAAA;AAAA,SAAAE,QAAAF,GAAA,sCAAAE,OAAA,wBAAAC,MAAA,uBAAAA,MAAA,CAAAC,QAAA,aAAAJ,GAAA,kBAAAA,GAAA,gBAAAA,GAAA,WAAAA,GAAA,yBAAAG,MAAA,IAAAH,GAAA,CAAAK,WAAA,KAAAF,MAAA,IAAAH,GAAA,KAAAG,MAAA,CAAAG,SAAA,qBAAAN,GAAA,KAAAE,OAAA,CAAAF,GAAA;AAMrC,SAASO,SAASA,CAACC,IAAoB,EAAE;EACvC,IAAI,CAACA,IAAI,IAAI,CAACA,IAAI,CAACC,MAAM,EAAE;IACzB,MAAM,IAAIC,KAAK,CACb,2FACF,CAAC;EACH;EACA,IAAIF,IAAI,CAACG,KAAK,CAACC,WAAW,CAAC,EAAE;IAC3B,MAAM,IAAIF,KAAK,CACb,sHACF,CAAC;EACH;AACF;AAEA,SAASE,WAAWA,CAACC,GAAY,EAAE;EACjC,OAAOA,GAAG,IAAI,IAAI,IAAI,QAAQ,CAACC,IAAI,CAAAZ,OAAA,CAAQW,GAAG,EAAC;AACjD;AAMO,SAASE,qBAAqBA,CAAIC,KAAQ,EAAE;EACjD,IAAMC,GAAG,GAAGC,iBAAK,CAACC,MAAM,CAAIH,KAAK,CAAC;EAClC,IAAMI,SAAS,GAAGF,iBAAK,CAACC,MAAM,CAAS,CAAC,CAAC;EAEzC,IAAI,CAAC,IAAAE,mBAAO,EAACL,KAAK,EAAEC,GAAG,CAACK,OAAO,CAAC,EAAE;IAChCL,GAAG,CAACK,OAAO,GAAGN,KAAK;IACnBI,SAAS,CAACE,OAAO,IAAI,CAAC;EACxB;EAGA,OAAOJ,iBAAK,CAACK,OAAO,CAAC;IAAA,OAAMN,GAAG,CAACK,OAAO;EAAA,GAAE,CAACF,SAAS,CAACE,OAAO,CAAC,CAAC;AAC9D;AAUO,IAAME,mBAAmB,GAAG,SAAtBA,mBAAmBA,CAC9BC,QAAwB,EACxBC,YAA4B,EACnB;EACT,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;IACzCtB,SAAS,CAACmB,YAAY,CAAC;EACzB;EAEA,OAAOR,iBAAK,CAACY,SAAS,CAACL,QAAQ,EAAEV,qBAAqB,CAACW,YAAY,CAAC,CAAC;AACvE,CAAC;AAACK,OAAA,CAAAP,mBAAA,GAAAA,mBAAA"}