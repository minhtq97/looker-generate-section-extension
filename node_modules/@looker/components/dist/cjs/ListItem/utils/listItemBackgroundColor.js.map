{"version":3,"file":"listItemBackgroundColor.js","names":["_designTokens","require","_styledComponents","_isListColor","_templateObject","_taggedTemplateLiteral","strings","raw","slice","Object","freeze","defineProperties","value","listItemBackgroundColor","_ref","color","colorOnHover","disabled","propsHovered","hovered","ripple","selected","colors","theme","stateColors","isListColor","all","concat","ui1","itemSelectedColor","ui2","renderedColor","css","exports"],"sources":["../../../../src/ListItem/utils/listItemBackgroundColor.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type { Colors, Theme } from '@looker/design-tokens';\nimport { itemSelectedColor } from '@looker/design-tokens';\nimport { css } from 'styled-components';\nimport type { ListItemColorProp, ListItemStatefulProps } from '../types';\nimport { isListColor } from './isListColor';\n\nexport type ListItemBackgroundColorProps = ListItemStatefulProps &\n  ListItemColorProp & {\n    /**\n     * Indicates ripple is enabled and hover should not be used\n     */\n    ripple?: boolean;\n  };\n\n/**\n * @TODO Remove hovered prop and hovered logic when ripple effect\n * is implemented in LkField components. All other ListItem related\n * components (i.e. ListItem, NavTreeItem, TreeItem) all use ripple\n * to handle hover state.\n */\nexport const listItemBackgroundColor = ({\n  color,\n  colorOnHover,\n  disabled,\n  hovered: propsHovered,\n  ripple,\n  selected,\n  theme: { colors },\n}: ListItemBackgroundColorProps & { theme: Theme }) => {\n  const stateColors = isListColor(color)\n    ? {\n        all: colors[`${color}Subtle` as keyof Colors],\n        hovered: colors.ui1,\n        selected: colors[`${color}Subtle` as keyof Colors],\n      }\n    : {\n        all: itemSelectedColor(colors.ui2),\n        hovered: colors.ui1,\n        selected: itemSelectedColor(colors.ui2),\n      };\n\n  let renderedColor;\n  const hovered = !ripple && propsHovered;\n\n  if (disabled) renderedColor = 'transparent';\n  else if (selected && hovered) renderedColor = stateColors.all;\n  else if (selected) renderedColor = stateColors.selected;\n  else if (hovered) renderedColor = stateColors.hovered;\n  else renderedColor = 'transparent';\n\n  return css`\n    background-color: ${renderedColor};\n  `;\n};\n"],"mappings":";;;;;;AAMA,IAAAA,aAAA,GAAAC,OAAA;AACA,IAAAC,iBAAA,GAAAD,OAAA;AAEA,IAAAE,YAAA,GAAAF,OAAA;AAA4C,IAAAG,eAAA;AAAA,SAAAC,uBAAAC,OAAA,EAAAC,GAAA,SAAAA,GAAA,IAAAA,GAAA,GAAAD,OAAA,CAAAE,KAAA,cAAAC,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAE,gBAAA,CAAAL,OAAA,IAAAC,GAAA,IAAAK,KAAA,EAAAH,MAAA,CAAAC,MAAA,CAAAH,GAAA;AAgBrC,IAAMM,uBAAuB,GAAG,SAA1BA,uBAAuBA,CAAAC,IAAA,EAQmB;EAAA,IAPrDC,KAAK,GAAAD,IAAA,CAALC,KAAK;IACLC,YAAY,GAAAF,IAAA,CAAZE,YAAY;IACZC,QAAQ,GAAAH,IAAA,CAARG,QAAQ;IACCC,YAAY,GAAAJ,IAAA,CAArBK,OAAO;IACPC,MAAM,GAAAN,IAAA,CAANM,MAAM;IACNC,QAAQ,GAAAP,IAAA,CAARO,QAAQ;IACCC,MAAM,GAAAR,IAAA,CAAfS,KAAK,CAAID,MAAM;EAEf,IAAME,WAAW,GAAG,IAAAC,wBAAW,EAACV,KAAK,CAAC,GAClC;IACEW,GAAG,EAAEJ,MAAM,IAAAK,MAAA,CAAIZ,KAAK,YAAyB;IAC7CI,OAAO,EAAEG,MAAM,CAACM,GAAG;IACnBP,QAAQ,EAAEC,MAAM,IAAAK,MAAA,CAAIZ,KAAK;EAC3B,CAAC,GACD;IACEW,GAAG,EAAE,IAAAG,+BAAiB,EAACP,MAAM,CAACQ,GAAG,CAAC;IAClCX,OAAO,EAAEG,MAAM,CAACM,GAAG;IACnBP,QAAQ,EAAE,IAAAQ,+BAAiB,EAACP,MAAM,CAACQ,GAAG;EACxC,CAAC;EAEL,IAAIC,aAAa;EACjB,IAAMZ,OAAO,GAAG,CAACC,MAAM,IAAIF,YAAY;EAEvC,IAAID,QAAQ,EAAEc,aAAa,GAAG,aAAa,CAAC,KACvC,IAAIV,QAAQ,IAAIF,OAAO,EAAEY,aAAa,GAAGP,WAAW,CAACE,GAAG,CAAC,KACzD,IAAIL,QAAQ,EAAEU,aAAa,GAAGP,WAAW,CAACH,QAAQ,CAAC,KACnD,IAAIF,OAAO,EAAEY,aAAa,GAAGP,WAAW,CAACL,OAAO,CAAC,KACjDY,aAAa,GAAG,aAAa;EAElC,WAAOC,qBAAG,EAAA5B,eAAA,KAAAA,eAAA,GAAAC,sBAAA,0CACY0B,aAAa;AAErC,CAAC;AAACE,OAAA,CAAApB,uBAAA,GAAAA,uBAAA"}