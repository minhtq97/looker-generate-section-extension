function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
import { ResponseMode, canRetry, initResponse, isErrorLike, pauseForRetry, responseMode, retryError, retryWait, safeBase64, mergeOptions } from './transport';
import { BaseTransport } from './baseTransport';
export class BrowserCryptoHash {
  arrayToHex(array) {
    return Array.from(array).map(b => b.toString(16).padStart(2, '0')).join('');
  }
  fromBase64(str) {
    return atob(str).split('').map(function (c) {
      return c.charCodeAt(0);
    });
  }
  secureRandom(byteCount) {
    var bytes = new Uint8Array(byteCount);
    window.crypto.getRandomValues(bytes);
    return this.arrayToHex(bytes);
  }
  sha256Hash(message) {
    return _asyncToGenerator(function* () {
      var msgUint8 = new TextEncoder().encode(message);
      var hashBuffer = yield window.crypto.subtle.digest('SHA-256', msgUint8);
      return safeBase64(new Uint8Array(hashBuffer));
    })();
  }
}
export class BrowserTransport extends BaseTransport {
  constructor(options) {
    super(options);
    this.options = options;
  }
  static supportsPerformance() {
    return !!(performance && performance.mark && performance.measure);
  }
  static get trackPerformance() {
    return this._trackPerf;
  }
  static set trackPerformance(value) {
    this._trackPerf = value && BrowserTransport.supportsPerformance();
  }
  static mark(name, tag) {
    if (this.trackPerformance) {
      var mark = "".concat(name, "-").concat(tag);
      performance.mark(mark);
      return mark;
    }
    return '';
  }
  static markName(url) {
    if (!this.trackPerformance) return '';
    var entries = performance.getEntriesByName(url, 'resource');
    if (entries.length > 0) {
      var last = entries[entries.length - 1];
      return "".concat(url, "-").concat(last.startTime);
    }
    return url;
  }
  static markStart(name) {
    return BrowserTransport.mark(name, BrowserTransport.startMark);
  }
  static markEnd(url, startName) {
    if (this.trackPerformance) {
      var measureName = this.markName(url);
      var end = BrowserTransport.mark(measureName, BrowserTransport.endMark);
      performance.measure(measureName, startName, end);
      performance.clearMarks(startName);
      performance.clearMarks(end);
      return measureName;
    }
    return '';
  }
  retry(request) {
    var _this = this;
    return _asyncToGenerator(function* () {
      var _request$options, _newOpts$maxTries;
      var {
        method,
        path,
        queryParams,
        body,
        authenticator
      } = request;
      var newOpts = mergeOptions(_this.options, (_request$options = request.options) !== null && _request$options !== void 0 ? _request$options : {});
      var requestPath = _this.makeUrl(path, newOpts, queryParams);
      var props = yield _this.initRequest(method, requestPath, body, authenticator, newOpts);
      var waiter = newOpts.waitHandler || retryWait;
      var response = initResponse(method, requestPath);
      var maxRetries = (_newOpts$maxTries = newOpts === null || newOpts === void 0 ? void 0 : newOpts.maxTries) !== null && _newOpts$maxTries !== void 0 ? _newOpts$maxTries : 1;
      var attempt = 1;
      var _loop = function* _loop() {
        var req = fetch(props.url, props);
        var requestStarted = Date.now();
        var res = yield req;
        var responseCompleted = Date.now();
        var started = BrowserTransport.markStart(BrowserTransport.markName(requestPath));
        var contentType = String(res.headers.get('content-type'));
        var mode = responseMode(contentType);
        var responseBody = mode === ResponseMode.binary ? yield res.blob() : yield res.text();
        if (!('fromRequest' in newOpts)) {
          BrowserTransport.markEnd(requestPath, started);
        }
        var headers = {};
        res.headers.forEach((value, key) => headers[key] = value);
        response = {
          method,
          url: requestPath,
          body: responseBody,
          contentType,
          statusCode: res.status,
          statusMessage: res.statusText,
          startMark: started,
          headers,
          requestStarted,
          responseCompleted,
          ok: true
        };
        response.ok = _this.ok(response);
        if (canRetry(response.statusCode) && attempt < maxRetries) {
          var result = yield pauseForRetry(request, response, attempt, waiter);
          if (result.response === 'cancel') {
            if (result.reason) {
              response.statusMessage = result.reason;
            }
            return "break";
          } else if (result.response === 'error') {
            if (result.reason) {
              response.statusMessage = result.reason;
            }
            return {
              v: retryError(response)
            };
          }
        } else {
          return "break";
        }
        attempt++;
      };
      while (attempt <= maxRetries) {
        var _ret = yield* _loop();
        if (_ret === "break") break;
        if (typeof _ret === "object") return _ret.v;
      }
      return response;
    })();
  }
  rawRequest(method, path, queryParams, body, authenticator, options) {
    var _this2 = this;
    return _asyncToGenerator(function* () {
      var response = yield _this2.retry({
        method,
        path,
        queryParams,
        body,
        authenticator,
        options
      });
      return _this2.observer ? _this2.observer(response) : response;
    })();
  }
  parseResponse(res) {
    return _asyncToGenerator(function* () {
      var perfMark = res.startMark || '';
      if (!res.ok) {
        var _error = res.body;
        if (typeof _error === 'string') {
          try {
            _error = JSON.parse(_error);
          } catch (_unused) {
            _error = {
              message: "Request failed: ".concat(_error)
            };
          }
        }
        var response = {
          ok: false,
          error: _error
        };
        return response;
      }
      var value;
      var error;
      if (res.contentType.match(/application\/json/g)) {
        try {
          value = JSON.parse(yield res.body);
          BrowserTransport.markEnd(res.url, perfMark);
        } catch (err) {
          error = err;
          BrowserTransport.markEnd(res.url, perfMark);
        }
      } else if (res.contentType === 'text' || res.contentType.startsWith('text/')) {
        value = res.body.toString();
        BrowserTransport.markEnd(res.url, perfMark);
      } else {
        try {
          BrowserTransport.markEnd(res.url, perfMark);
          value = res.body;
        } catch (err) {
          BrowserTransport.markEnd(res.url, perfMark);
          error = err;
        }
      }
      var result;
      if (error) {
        result = {
          ok: false,
          error: error
        };
      } else {
        result = {
          ok: true,
          value
        };
      }
      return result;
    })();
  }
  request(method, path, queryParams, body, authenticator, options) {
    var _this3 = this;
    return _asyncToGenerator(function* () {
      try {
        if (BrowserTransport.trackPerformance) {
          options = _objectSpread(_objectSpread({}, options), {}, {
            fromRequest: true
          });
        }
        var res = yield _this3.rawRequest(method, path, queryParams, body, authenticator, options);
        var result = yield _this3.parseResponse(res);
        return result;
      } catch (e) {
        if (!isErrorLike(e)) throw e;
        var error = {
          message: typeof e.message === 'string' ? e.message : "The SDK call was not successful. The error was '".concat(e, "'."),
          type: 'sdk_error'
        };
        return {
          error,
          ok: false
        };
      }
    })();
  }
  stream(callback, method, path, queryParams, body, authenticator, options) {
    var _this4 = this;
    return _asyncToGenerator(function* () {
      var newOpts = _objectSpread(_objectSpread({}, _this4.options), {}, {
        options
      });
      var requestPath = _this4.makeUrl(path, newOpts, queryParams);
      var init = yield _this4.initRequest(method, requestPath, body, authenticator, newOpts);
      var response = yield fetch(requestPath, init);
      return yield callback(response);
    })();
  }
}
_defineProperty(BrowserTransport, "_trackPerf", false);
_defineProperty(BrowserTransport, "startMark", 'A');
_defineProperty(BrowserTransport, "endMark", 'B');
//# sourceMappingURL=browserTransport.js.map