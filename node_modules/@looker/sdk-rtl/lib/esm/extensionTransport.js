function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
export class ExtensionTransport {
  constructor(options, hostConnection) {
    this.options = options;
    this.hostConnection = hostConnection;
    _defineProperty(this, "observer", void 0);
    this.options = options;
    this.hostConnection = hostConnection;
  }
  rawRequest(method, path, queryParams, body, authenticator, options) {
    var _this = this;
    return _asyncToGenerator(function* () {
      var response = yield _this.hostConnection.rawRequest(method, path, body, queryParams, authenticator, options);
      return _this.observer ? _this.observer(response) : response;
    })();
  }
  request(method, path, queryParams, body, authenticator, options) {
    var _this2 = this;
    return _asyncToGenerator(function* () {
      return _this2.hostConnection.request(method, path, body, queryParams, authenticator, options);
    })();
  }
  stream(callback, method, path, queryParams, body, authenticator, options) {
    var _this3 = this;
    return _asyncToGenerator(function* () {
      options = options ? _objectSpread(_objectSpread({}, _this3.options), options) : _this3.options;
      return _this3.hostConnection.stream(callback, method, path, body, queryParams, authenticator, options);
    })();
  }
  parseResponse(_raw) {
    var result = {
      ok: false,
      error: new Error('Should not be called!')
    };
    return Promise.resolve(result);
  }
  retry(_request) {
    return Promise.reject(new Error('TODO: retry not implemented yet'));
  }
}
//# sourceMappingURL=extensionTransport.js.map