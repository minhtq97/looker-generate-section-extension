"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.googleFontUrl = exports.googleFontParam = void 0;
var _excluded = ["family", "italic"];
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var googleFontsBaseUrl = 'https://fonts.googleapis.com/css2';
var googleFontParam = function googleFontParam(_ref) {
  var family = _ref.family,
    _ref$italic = _ref.italic,
    italic = _ref$italic === void 0 ? true : _ref$italic,
    font = _objectWithoutProperties(_ref, _excluded);
  var uri = "".concat(family.replace(/"/g, '').replace(/ /g, '+'), ":");
  var weights = font.weights.map(function (weight) {
    return "0,".concat(weight);
  });
  if (italic) {
    var italicizedWeights = font.weights.map(function (weight) {
      return "1,".concat(weight);
    });
    weights = [].concat(_toConsumableArray(weights), _toConsumableArray(italicizedWeights));
    uri += 'ital,';
  }
  uri += "wght@".concat(weights.join(';'));
  return uri;
};
exports.googleFontParam = googleFontParam;
var googleFontUrl = function googleFontUrl(theme) {
  var url = new URL(googleFontsBaseUrl);
  var weights = Object.values(theme.fontWeights);
  var fonts = Object.values(theme.fonts).map(function (family) {
    return {
      family: family.split(',')[0].replace(/'/g, ''),
      weights: weights
    };
  });
  var search = fonts.map(function (font) {
    return "family=".concat(googleFontParam(font));
  });
  search.push('display=swap');
  url.search = search.join('&');
  return url.toString();
};
exports.googleFontUrl = googleFontUrl;
//# sourceMappingURL=googleFontUrl.js.map