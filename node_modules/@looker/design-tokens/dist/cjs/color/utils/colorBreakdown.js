"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.colorBreakdown = void 0;
var _chunk = _interopRequireDefault(require("lodash/chunk"));
var _ = require("../");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
var colorBreakdown = function colorBreakdown(colors) {
  var divided = {
    core: {},
    derivative: {},
    intent: {},
    specializedText: {},
    stateful: {},
    text: {},
    ui: {}
  };
  for (var _i = 0, _Object$entries = Object.entries(colors); _i < _Object$entries.length; _i++) {
    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
      _key = _Object$entries$_i[0],
      value = _Object$entries$_i[1];
    if (_.coreColors.includes(_key)) {
      if (_key !== 'pageBackground') {
        divided.core[_key] = value;
      }
    } else if (_.intentColors.includes(_key)) {
      divided.intent[_key] = value;
    } else if (_.derivativeColors.includes(_key)) {
      divided.derivative[_key] = value;
    } else if (_.textColors.includes(_key)) {
      divided.text[_key] = value;
    } else if (_.uiColors.includes(_key)) {
      divided.ui[_key] = value;
    } else if (_.specifiableTextColors.includes(_key)) {
      divided.specializedText[_key] = value;
    } else {
      divided.stateful[_key] = value;
    }
  }
  var statefulColorGroups = (0, _chunk["default"])(Object.entries(divided.stateful), 7).map(function (chunk) {
    var obj = {};
    chunk.forEach(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
        name = _ref2[0],
        color = _ref2[1];
      return obj[name] = color;
    });
    return obj;
  });
  return {
    divided: divided,
    statefulColorGroups: statefulColorGroups
  };
};
exports.colorBreakdown = colorBreakdown;
//# sourceMappingURL=colorBreakdown.js.map