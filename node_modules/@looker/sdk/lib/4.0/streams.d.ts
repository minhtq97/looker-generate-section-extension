import type { DelimArray, IDictionary, IAuthSession, ITransportSettings } from '@looker/sdk-rtl';
import { APIMethods } from '@looker/sdk-rtl';
import type { IAccessToken, IAlert, IAlertNotifications, IAlertPatch, IApiSession, IApiVersion, IArtifact, IArtifactNamespace, IArtifactUsage, IBackupConfiguration, IBoard, IBoardItem, IBoardSection, IColorCollection, IColumnSearch, IConnectionFeatures, IContentFavorite, IContentMeta, IContentMetaGroupUser, IContentSearch, IContentSummary, IContentValidation, IContentView, ICostEstimate, ICreateCIRunRequest, ICreateCIRunResponse, ICreateCostEstimate, ICreateCredentialsApi3, ICreateEmbedUserRequest, ICreateFolder, ICreateOAuthApplicationUserStateRequest, ICreateOAuthApplicationUserStateResponse, ICredentialsApi3, ICredentialsEmail, ICredentialsEmailSearch, ICredentialsEmbed, ICredentialsGoogle, ICredentialsLDAP, ICredentialsLookerOpenid, ICredentialsOIDC, ICredentialsSaml, ICredentialsTotp, ICustomWelcomeEmail, IDashboard, IDashboardAggregateTableLookml, IDashboardBase, IDashboardElement, IDashboardFilter, IDashboardLayout, IDashboardLayoutComponent, IDashboardLookml, IDataActionForm, IDataActionRequest, IDataActionResponse, IDatagroup, IDBConnection, IDBConnectionTestResult, IDependencyGraph, IDialectInfo, IDigestEmails, IDigestEmailSend, IEgressIpAddresses, IEmbedCookielessSessionAcquire, IEmbedCookielessSessionAcquireResponse, IEmbedCookielessSessionGenerateTokens, IEmbedCookielessSessionGenerateTokensResponse, IEmbedParams, IEmbedSecret, IEmbedSsoParams, IEmbedUrlResponse, IExternalOauthApplication, IFolder, IFolderBase, IGitBranch, IGitConnectionTest, IGitConnectionTestResult, IGroup, IGroupHierarchy, IGroupIdForGroupInclusion, IGroupIdForGroupUserInclusion, IGroupSearch, IHomepageSection, IIntegration, IIntegrationHub, IIntegrationTestResult, IInternalHelpResources, IInternalHelpResourcesContent, IJsonBi, ILDAPConfig, ILDAPConfigTestResult, ILegacyFeature, ILocale, ILook, ILookmlModel, ILookmlModelExplore, ILookmlTest, ILookmlTestResult, ILookWithQuery, IManifest, IMaterializePDT, IMergeQuery, IMobileSettings, IMobileToken, IModel, IModelFieldSuggestions, IModelSet, IOauthClientApp, IOIDCConfig, IPasswordConfig, IPermission, IPermissionSet, IProject, IProjectCIRun, IProjectFile, IProjectValidation, IProjectValidationCache, IProjectWorkspace, IQuery, IQueryTask, IRenderTask, IReport, IRepositoryCredential, IRequestActiveThemes, IRequestAlertNotifications, IRequestAllBoardItems, IRequestAllBoardSections, IRequestAllExternalOauthApplications, IRequestAllGroups, IRequestAllGroupUsers, IRequestAllIntegrations, IRequestAllLookmlModels, IRequestAllRoles, IRequestAllScheduledPlans, IRequestAllUserAttributes, IRequestAllUsers, IRequestArtifact, IRequestArtifactNamespaces, IRequestConnectionColumns, IRequestConnectionSchemas, IRequestConnectionSearchColumns, IRequestConnectionTables, IRequestContentSummary, IRequestContentThumbnail, IRequestContentValidation, IRequestCreateDashboardElement, IRequestCreateDashboardRenderTask, IRequestCreateQueryTask, IRequestCreateUserCredentialsEmailPasswordReset, IRequestDeployRefToProduction, IRequestFolderChildren, IRequestFolderChildrenSearch, IRequestGraphDerivedTablesForModel, IRequestGraphDerivedTablesForView, IRequestLogin, IRequestLookmlModelExplore, IRequestModelFieldnameSuggestions, IRequestRoleUsers, IRequestRunGitConnectionTest, IRequestRunInlineQuery, IRequestRunLook, IRequestRunLookmlTest, IRequestRunQuery, IRequestScheduledPlansForDashboard, IRequestScheduledPlansForLook, IRequestScheduledPlansForLookmlDashboard, IRequestSearchAlerts, IRequestSearchArtifacts, IRequestSearchBoards, IRequestSearchContent, IRequestSearchContentFavorites, IRequestSearchContentViews, IRequestSearchCredentialsEmail, IRequestSearchDashboardElements, IRequestSearchDashboards, IRequestSearchFolders, IRequestSearchGroups, IRequestSearchGroupsWithHierarchy, IRequestSearchGroupsWithRoles, IRequestSearchLooks, IRequestSearchModelSets, IRequestSearchPermissionSets, IRequestSearchReports, IRequestSearchRoles, IRequestSearchRolesWithUserCount, IRequestSearchScheduledPlans, IRequestSearchThemes, IRequestSearchUserLoginLockouts, IRequestSearchUsers, IRequestSearchUsersNames, IRequestStartPdtBuild, IRequestSyncLookmlDashboard, IRequestTagRef, IRequestUserAttributeUserValues, IRequestUserRoles, IRole, IRoleSearch, IRunningQueries, ISamlConfig, ISamlMetadataParseResult, IScheduledPlan, ISchema, ISchemaColumns, ISchemaTables, ISession, ISessionConfig, ISetting, ISmtpSettings, ISmtpStatus, ISqlInterfaceQuery, ISqlInterfaceQueryMetadata, ISqlQuery, ISqlQueryCreate, ISshPublicKey, ISshServer, ISshTunnel, ISupportAccessAddEntries, ISupportAccessAllowlistEntry, ISupportAccessEnable, ISupportAccessStatus, ITheme, ITimezone, IUpdateArtifact, IUpdateFolder, IUser, IUserAttribute, IUserAttributeGroupValue, IUserAttributeWithValue, IUserEmailOnly, IUserLoginLockout, IUserPublic, IValidationError, IWelcomeEmailTest, IWhitelabelConfiguration, IWorkspace, IWriteAlert, IWriteApiSession, IWriteBackupConfiguration, IWriteBoard, IWriteBoardItem, IWriteBoardSection, IWriteColorCollection, IWriteContentFavorite, IWriteContentMeta, IWriteCreateDashboardFilter, IWriteCredentialsEmail, IWriteDashboard, IWriteDashboardElement, IWriteDashboardFilter, IWriteDashboardLayout, IWriteDashboardLayoutComponent, IWriteDashboardLookml, IWriteDatagroup, IWriteDBConnection, IWriteEmbedSecret, IWriteExternalOauthApplication, IWriteGitBranch, IWriteGroup, IWriteIntegration, IWriteIntegrationHub, IWriteInternalHelpResources, IWriteInternalHelpResourcesContent, IWriteLDAPConfig, IWriteLegacyFeature, IWriteLookmlModel, IWriteLookWithQuery, IWriteMergeQuery, IWriteMobileToken, IWriteModelSet, IWriteOauthClientApp, IWriteOIDCConfig, IWritePasswordConfig, IWritePermissionSet, IWriteProject, IWriteQuery, IWriteRepositoryCredential, IWriteRole, IWriteSamlConfig, IWriteScheduledPlan, IWriteSessionConfig, IWriteSetting, IWriteSqlInterfaceQueryCreate, IWriteSshServer, IWriteSshTunnel, IWriteTheme, IWriteUser, IWriteUserAttribute, IWriteUserAttributeWithValue, IWriteWhitelabelConfiguration } from './models';
export declare class Looker40SDKStream extends APIMethods {
    static readonly ApiVersion = "4.0";
    constructor(authSession: IAuthSession);
    follow_alert(callback: (response: Response) => Promise<void>, alert_id: string, options?: Partial<ITransportSettings>): Promise<void>;
    unfollow_alert(callback: (response: Response) => Promise<void>, alert_id: string, options?: Partial<ITransportSettings>): Promise<void>;
    search_alerts(callback: (response: Response) => Promise<IAlert[]>, request: IRequestSearchAlerts, options?: Partial<ITransportSettings>): Promise<IAlert[]>;
    get_alert(callback: (response: Response) => Promise<IAlert>, alert_id: string, options?: Partial<ITransportSettings>): Promise<IAlert>;
    update_alert(callback: (response: Response) => Promise<IAlert>, alert_id: string, body: Partial<IWriteAlert>, options?: Partial<ITransportSettings>): Promise<IAlert>;
    update_alert_field(callback: (response: Response) => Promise<IAlert>, alert_id: string, body: Partial<IAlertPatch>, options?: Partial<ITransportSettings>): Promise<IAlert>;
    delete_alert(callback: (response: Response) => Promise<void>, alert_id: string, options?: Partial<ITransportSettings>): Promise<void>;
    create_alert(callback: (response: Response) => Promise<IAlert>, body: Partial<IWriteAlert>, options?: Partial<ITransportSettings>): Promise<IAlert>;
    enqueue_alert(callback: (response: Response) => Promise<void>, alert_id: string, force?: boolean, options?: Partial<ITransportSettings>): Promise<void>;
    alert_notifications(callback: (response: Response) => Promise<IAlertNotifications[]>, request: IRequestAlertNotifications, options?: Partial<ITransportSettings>): Promise<IAlertNotifications[]>;
    read_alert_notification(callback: (response: Response) => Promise<IAlertNotifications>, alert_notification_id: string, options?: Partial<ITransportSettings>): Promise<IAlertNotifications>;
    login(callback: (response: Response) => Promise<IAccessToken>, request: IRequestLogin, options?: Partial<ITransportSettings>): Promise<IAccessToken>;
    login_user(callback: (response: Response) => Promise<IAccessToken>, user_id: string, associative?: boolean, options?: Partial<ITransportSettings>): Promise<IAccessToken>;
    logout(callback: (response: Response) => Promise<string>, options?: Partial<ITransportSettings>): Promise<string>;
    artifact_usage(callback: (response: Response) => Promise<IArtifactUsage>, fields?: string, options?: Partial<ITransportSettings>): Promise<IArtifactUsage>;
    artifact_namespaces(callback: (response: Response) => Promise<IArtifactNamespace[]>, request: IRequestArtifactNamespaces, options?: Partial<ITransportSettings>): Promise<IArtifactNamespace[]>;
    artifact_value(callback: (response: Response) => Promise<string>, namespace: string, key?: string, options?: Partial<ITransportSettings>): Promise<string>;
    purge_artifacts(callback: (response: Response) => Promise<void>, namespace: string, options?: Partial<ITransportSettings>): Promise<void>;
    search_artifacts(callback: (response: Response) => Promise<IArtifact[]>, request: IRequestSearchArtifacts, options?: Partial<ITransportSettings>): Promise<IArtifact[]>;
    artifact(callback: (response: Response) => Promise<IArtifact[]>, request: IRequestArtifact, options?: Partial<ITransportSettings>): Promise<IArtifact[]>;
    delete_artifact(callback: (response: Response) => Promise<void>, namespace: string, key: string, options?: Partial<ITransportSettings>): Promise<void>;
    update_artifacts(callback: (response: Response) => Promise<IArtifact[]>, namespace: string, body: Partial<IUpdateArtifact[]>, fields?: string, options?: Partial<ITransportSettings>): Promise<IArtifact[]>;
    create_embed_secret(callback: (response: Response) => Promise<IEmbedSecret>, body?: Partial<IWriteEmbedSecret>, options?: Partial<ITransportSettings>): Promise<IEmbedSecret>;
    delete_embed_secret(callback: (response: Response) => Promise<string>, embed_secret_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    create_sso_embed_url(callback: (response: Response) => Promise<IEmbedUrlResponse>, body: Partial<IEmbedSsoParams>, options?: Partial<ITransportSettings>): Promise<IEmbedUrlResponse>;
    create_embed_url_as_me(callback: (response: Response) => Promise<IEmbedUrlResponse>, body: Partial<IEmbedParams>, options?: Partial<ITransportSettings>): Promise<IEmbedUrlResponse>;
    validate_embed_url(callback: (response: Response) => Promise<IEmbedUrlResponse>, url?: string, options?: Partial<ITransportSettings>): Promise<IEmbedUrlResponse>;
    acquire_embed_cookieless_session(callback: (response: Response) => Promise<IEmbedCookielessSessionAcquireResponse>, body: Partial<IEmbedCookielessSessionAcquire>, options?: Partial<ITransportSettings>): Promise<IEmbedCookielessSessionAcquireResponse>;
    delete_embed_cookieless_session(callback: (response: Response) => Promise<string>, session_reference_token: string, options?: Partial<ITransportSettings>): Promise<string>;
    generate_tokens_for_cookieless_session(callback: (response: Response) => Promise<IEmbedCookielessSessionGenerateTokensResponse>, body: Partial<IEmbedCookielessSessionGenerateTokens>, options?: Partial<ITransportSettings>): Promise<IEmbedCookielessSessionGenerateTokensResponse>;
    ldap_config(callback: (response: Response) => Promise<ILDAPConfig>, options?: Partial<ITransportSettings>): Promise<ILDAPConfig>;
    update_ldap_config(callback: (response: Response) => Promise<ILDAPConfig>, body: Partial<IWriteLDAPConfig>, options?: Partial<ITransportSettings>): Promise<ILDAPConfig>;
    test_ldap_config_connection(callback: (response: Response) => Promise<ILDAPConfigTestResult>, body: Partial<IWriteLDAPConfig>, options?: Partial<ITransportSettings>): Promise<ILDAPConfigTestResult>;
    test_ldap_config_auth(callback: (response: Response) => Promise<ILDAPConfigTestResult>, body: Partial<IWriteLDAPConfig>, options?: Partial<ITransportSettings>): Promise<ILDAPConfigTestResult>;
    test_ldap_config_user_info(callback: (response: Response) => Promise<ILDAPConfigTestResult>, body: Partial<IWriteLDAPConfig>, options?: Partial<ITransportSettings>): Promise<ILDAPConfigTestResult>;
    test_ldap_config_user_auth(callback: (response: Response) => Promise<ILDAPConfigTestResult>, body: Partial<IWriteLDAPConfig>, options?: Partial<ITransportSettings>): Promise<ILDAPConfigTestResult>;
    register_mobile_device(callback: (response: Response) => Promise<IMobileToken>, body: Partial<IWriteMobileToken>, options?: Partial<ITransportSettings>): Promise<IMobileToken>;
    update_mobile_device_registration(callback: (response: Response) => Promise<IMobileToken>, device_id: string, options?: Partial<ITransportSettings>): Promise<IMobileToken>;
    deregister_mobile_device(callback: (response: Response) => Promise<void>, device_id: string, options?: Partial<ITransportSettings>): Promise<void>;
    all_oauth_client_apps(callback: (response: Response) => Promise<IOauthClientApp[]>, fields?: string, options?: Partial<ITransportSettings>): Promise<IOauthClientApp[]>;
    oauth_client_app(callback: (response: Response) => Promise<IOauthClientApp>, client_guid: string, fields?: string, options?: Partial<ITransportSettings>): Promise<IOauthClientApp>;
    register_oauth_client_app(callback: (response: Response) => Promise<IOauthClientApp>, client_guid: string, body: Partial<IWriteOauthClientApp>, fields?: string, options?: Partial<ITransportSettings>): Promise<IOauthClientApp>;
    update_oauth_client_app(callback: (response: Response) => Promise<IOauthClientApp>, client_guid: string, body: Partial<IWriteOauthClientApp>, fields?: string, options?: Partial<ITransportSettings>): Promise<IOauthClientApp>;
    delete_oauth_client_app(callback: (response: Response) => Promise<string>, client_guid: string, options?: Partial<ITransportSettings>): Promise<string>;
    invalidate_tokens(callback: (response: Response) => Promise<string>, client_guid: string, options?: Partial<ITransportSettings>): Promise<string>;
    activate_app_user(callback: (response: Response) => Promise<string>, client_guid: string, user_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<string>;
    deactivate_app_user(callback: (response: Response) => Promise<string>, client_guid: string, user_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<string>;
    oidc_config(callback: (response: Response) => Promise<IOIDCConfig>, options?: Partial<ITransportSettings>): Promise<IOIDCConfig>;
    update_oidc_config(callback: (response: Response) => Promise<IOIDCConfig>, body: Partial<IWriteOIDCConfig>, options?: Partial<ITransportSettings>): Promise<IOIDCConfig>;
    oidc_test_config(callback: (response: Response) => Promise<IOIDCConfig>, test_slug: string, options?: Partial<ITransportSettings>): Promise<IOIDCConfig>;
    delete_oidc_test_config(callback: (response: Response) => Promise<string>, test_slug: string, options?: Partial<ITransportSettings>): Promise<string>;
    create_oidc_test_config(callback: (response: Response) => Promise<IOIDCConfig>, body: Partial<IWriteOIDCConfig>, options?: Partial<ITransportSettings>): Promise<IOIDCConfig>;
    password_config(callback: (response: Response) => Promise<IPasswordConfig>, options?: Partial<ITransportSettings>): Promise<IPasswordConfig>;
    update_password_config(callback: (response: Response) => Promise<IPasswordConfig>, body: Partial<IWritePasswordConfig>, options?: Partial<ITransportSettings>): Promise<IPasswordConfig>;
    force_password_reset_at_next_login_for_all_users(callback: (response: Response) => Promise<string>, options?: Partial<ITransportSettings>): Promise<string>;
    saml_config(callback: (response: Response) => Promise<ISamlConfig>, options?: Partial<ITransportSettings>): Promise<ISamlConfig>;
    update_saml_config(callback: (response: Response) => Promise<ISamlConfig>, body: Partial<IWriteSamlConfig>, options?: Partial<ITransportSettings>): Promise<ISamlConfig>;
    saml_test_config(callback: (response: Response) => Promise<ISamlConfig>, test_slug: string, options?: Partial<ITransportSettings>): Promise<ISamlConfig>;
    delete_saml_test_config(callback: (response: Response) => Promise<string>, test_slug: string, options?: Partial<ITransportSettings>): Promise<string>;
    create_saml_test_config(callback: (response: Response) => Promise<ISamlConfig>, body: Partial<IWriteSamlConfig>, options?: Partial<ITransportSettings>): Promise<ISamlConfig>;
    parse_saml_idp_metadata(callback: (response: Response) => Promise<ISamlMetadataParseResult>, body: string, options?: Partial<ITransportSettings>): Promise<ISamlMetadataParseResult>;
    fetch_and_parse_saml_idp_metadata(callback: (response: Response) => Promise<ISamlMetadataParseResult>, body: string, options?: Partial<ITransportSettings>): Promise<ISamlMetadataParseResult>;
    session_config(callback: (response: Response) => Promise<ISessionConfig>, options?: Partial<ITransportSettings>): Promise<ISessionConfig>;
    update_session_config(callback: (response: Response) => Promise<ISessionConfig>, body: Partial<IWriteSessionConfig>, options?: Partial<ITransportSettings>): Promise<ISessionConfig>;
    get_support_access_allowlist_entries(callback: (response: Response) => Promise<ISupportAccessAllowlistEntry[]>, fields?: string, options?: Partial<ITransportSettings>): Promise<ISupportAccessAllowlistEntry[]>;
    add_support_access_allowlist_entries(callback: (response: Response) => Promise<ISupportAccessAllowlistEntry[]>, body: Partial<ISupportAccessAddEntries>, options?: Partial<ITransportSettings>): Promise<ISupportAccessAllowlistEntry[]>;
    delete_support_access_allowlist_entry(callback: (response: Response) => Promise<string>, entry_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    enable_support_access(callback: (response: Response) => Promise<ISupportAccessStatus>, body: Partial<ISupportAccessEnable>, options?: Partial<ITransportSettings>): Promise<ISupportAccessStatus>;
    disable_support_access(callback: (response: Response) => Promise<ISupportAccessStatus>, options?: Partial<ITransportSettings>): Promise<ISupportAccessStatus>;
    support_access_status(callback: (response: Response) => Promise<ISupportAccessStatus>, options?: Partial<ITransportSettings>): Promise<ISupportAccessStatus>;
    all_user_login_lockouts(callback: (response: Response) => Promise<IUserLoginLockout[]>, fields?: string, options?: Partial<ITransportSettings>): Promise<IUserLoginLockout[]>;
    search_user_login_lockouts(callback: (response: Response) => Promise<IUserLoginLockout[]>, request: IRequestSearchUserLoginLockouts, options?: Partial<ITransportSettings>): Promise<IUserLoginLockout[]>;
    delete_user_login_lockout(callback: (response: Response) => Promise<string>, key: string, options?: Partial<ITransportSettings>): Promise<string>;
    all_boards(callback: (response: Response) => Promise<IBoard[]>, fields?: string, options?: Partial<ITransportSettings>): Promise<IBoard[]>;
    create_board(callback: (response: Response) => Promise<IBoard>, body: Partial<IWriteBoard>, fields?: string, options?: Partial<ITransportSettings>): Promise<IBoard>;
    search_boards(callback: (response: Response) => Promise<IBoard[]>, request: IRequestSearchBoards, options?: Partial<ITransportSettings>): Promise<IBoard[]>;
    board(callback: (response: Response) => Promise<IBoard>, board_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<IBoard>;
    update_board(callback: (response: Response) => Promise<IBoard>, board_id: string, body: Partial<IWriteBoard>, fields?: string, options?: Partial<ITransportSettings>): Promise<IBoard>;
    delete_board(callback: (response: Response) => Promise<string>, board_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    all_board_items(callback: (response: Response) => Promise<IBoardItem[]>, request: IRequestAllBoardItems, options?: Partial<ITransportSettings>): Promise<IBoardItem[]>;
    create_board_item(callback: (response: Response) => Promise<IBoardItem>, body: Partial<IWriteBoardItem>, fields?: string, options?: Partial<ITransportSettings>): Promise<IBoardItem>;
    board_item(callback: (response: Response) => Promise<IBoardItem>, board_item_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<IBoardItem>;
    update_board_item(callback: (response: Response) => Promise<IBoardItem>, board_item_id: string, body: Partial<IWriteBoardItem>, fields?: string, options?: Partial<ITransportSettings>): Promise<IBoardItem>;
    delete_board_item(callback: (response: Response) => Promise<string>, board_item_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    all_board_sections(callback: (response: Response) => Promise<IBoardSection[]>, request: IRequestAllBoardSections, options?: Partial<ITransportSettings>): Promise<IBoardSection[]>;
    create_board_section(callback: (response: Response) => Promise<IBoardSection>, body: Partial<IWriteBoardSection>, fields?: string, options?: Partial<ITransportSettings>): Promise<IBoardSection>;
    board_section(callback: (response: Response) => Promise<IBoardSection>, board_section_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<IBoardSection>;
    update_board_section(callback: (response: Response) => Promise<IBoardSection>, board_section_id: string, body: Partial<IWriteBoardSection>, fields?: string, options?: Partial<ITransportSettings>): Promise<IBoardSection>;
    delete_board_section(callback: (response: Response) => Promise<string>, board_section_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    all_color_collections(callback: (response: Response) => Promise<IColorCollection[]>, fields?: string, options?: Partial<ITransportSettings>): Promise<IColorCollection[]>;
    create_color_collection(callback: (response: Response) => Promise<IColorCollection>, body: Partial<IWriteColorCollection>, options?: Partial<ITransportSettings>): Promise<IColorCollection>;
    color_collections_custom(callback: (response: Response) => Promise<IColorCollection[]>, fields?: string, options?: Partial<ITransportSettings>): Promise<IColorCollection[]>;
    color_collections_standard(callback: (response: Response) => Promise<IColorCollection[]>, fields?: string, options?: Partial<ITransportSettings>): Promise<IColorCollection[]>;
    default_color_collection(callback: (response: Response) => Promise<IColorCollection>, options?: Partial<ITransportSettings>): Promise<IColorCollection>;
    set_default_color_collection(callback: (response: Response) => Promise<IColorCollection>, collection_id: string, options?: Partial<ITransportSettings>): Promise<IColorCollection>;
    color_collection(callback: (response: Response) => Promise<IColorCollection>, collection_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<IColorCollection>;
    update_color_collection(callback: (response: Response) => Promise<IColorCollection>, collection_id: string, body: Partial<IWriteColorCollection>, options?: Partial<ITransportSettings>): Promise<IColorCollection>;
    delete_color_collection(callback: (response: Response) => Promise<string>, collection_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    cloud_storage_configuration(callback: (response: Response) => Promise<IBackupConfiguration>, options?: Partial<ITransportSettings>): Promise<IBackupConfiguration>;
    update_cloud_storage_configuration(callback: (response: Response) => Promise<IBackupConfiguration>, body: Partial<IWriteBackupConfiguration>, options?: Partial<ITransportSettings>): Promise<IBackupConfiguration>;
    custom_welcome_email(callback: (response: Response) => Promise<ICustomWelcomeEmail>, options?: Partial<ITransportSettings>): Promise<ICustomWelcomeEmail>;
    update_custom_welcome_email(callback: (response: Response) => Promise<ICustomWelcomeEmail>, body: Partial<ICustomWelcomeEmail>, send_test_welcome_email?: boolean, options?: Partial<ITransportSettings>): Promise<ICustomWelcomeEmail>;
    update_custom_welcome_email_test(callback: (response: Response) => Promise<IWelcomeEmailTest>, body: Partial<IWelcomeEmailTest>, options?: Partial<ITransportSettings>): Promise<IWelcomeEmailTest>;
    digest_emails_enabled(callback: (response: Response) => Promise<IDigestEmails>, options?: Partial<ITransportSettings>): Promise<IDigestEmails>;
    update_digest_emails_enabled(callback: (response: Response) => Promise<IDigestEmails>, body: Partial<IDigestEmails>, options?: Partial<ITransportSettings>): Promise<IDigestEmails>;
    create_digest_email_send(callback: (response: Response) => Promise<IDigestEmailSend>, options?: Partial<ITransportSettings>): Promise<IDigestEmailSend>;
    public_egress_ip_addresses(callback: (response: Response) => Promise<IEgressIpAddresses>, options?: Partial<ITransportSettings>): Promise<IEgressIpAddresses>;
    internal_help_resources_content(callback: (response: Response) => Promise<IInternalHelpResourcesContent>, options?: Partial<ITransportSettings>): Promise<IInternalHelpResourcesContent>;
    update_internal_help_resources_content(callback: (response: Response) => Promise<IInternalHelpResourcesContent>, body: Partial<IWriteInternalHelpResourcesContent>, options?: Partial<ITransportSettings>): Promise<IInternalHelpResourcesContent>;
    internal_help_resources(callback: (response: Response) => Promise<IInternalHelpResources>, options?: Partial<ITransportSettings>): Promise<IInternalHelpResources>;
    update_internal_help_resources(callback: (response: Response) => Promise<IInternalHelpResources>, body: Partial<IWriteInternalHelpResources>, options?: Partial<ITransportSettings>): Promise<IInternalHelpResources>;
    all_legacy_features(callback: (response: Response) => Promise<ILegacyFeature[]>, options?: Partial<ITransportSettings>): Promise<ILegacyFeature[]>;
    legacy_feature(callback: (response: Response) => Promise<ILegacyFeature>, legacy_feature_id: string, options?: Partial<ITransportSettings>): Promise<ILegacyFeature>;
    update_legacy_feature(callback: (response: Response) => Promise<ILegacyFeature>, legacy_feature_id: string, body: Partial<IWriteLegacyFeature>, options?: Partial<ITransportSettings>): Promise<ILegacyFeature>;
    all_locales(callback: (response: Response) => Promise<ILocale[]>, options?: Partial<ITransportSettings>): Promise<ILocale[]>;
    mobile_settings(callback: (response: Response) => Promise<IMobileSettings>, options?: Partial<ITransportSettings>): Promise<IMobileSettings>;
    get_setting(callback: (response: Response) => Promise<ISetting>, fields?: string, options?: Partial<ITransportSettings>): Promise<ISetting>;
    set_setting(callback: (response: Response) => Promise<ISetting>, body: Partial<IWriteSetting>, fields?: string, options?: Partial<ITransportSettings>): Promise<ISetting>;
    set_smtp_settings(callback: (response: Response) => Promise<void>, body: Partial<ISmtpSettings>, options?: Partial<ITransportSettings>): Promise<void>;
    smtp_status(callback: (response: Response) => Promise<ISmtpStatus>, fields?: string, options?: Partial<ITransportSettings>): Promise<ISmtpStatus>;
    all_timezones(callback: (response: Response) => Promise<ITimezone[]>, options?: Partial<ITransportSettings>): Promise<ITimezone[]>;
    versions(callback: (response: Response) => Promise<IApiVersion>, fields?: string, options?: Partial<ITransportSettings>): Promise<IApiVersion>;
    api_spec(callback: (response: Response) => Promise<any>, api_version: string, specification: string, options?: Partial<ITransportSettings>): Promise<any>;
    whitelabel_configuration(callback: (response: Response) => Promise<IWhitelabelConfiguration>, fields?: string, options?: Partial<ITransportSettings>): Promise<IWhitelabelConfiguration>;
    update_whitelabel_configuration(callback: (response: Response) => Promise<IWhitelabelConfiguration>, body: Partial<IWriteWhitelabelConfiguration>, options?: Partial<ITransportSettings>): Promise<IWhitelabelConfiguration>;
    all_connections(callback: (response: Response) => Promise<IDBConnection[]>, fields?: string, options?: Partial<ITransportSettings>): Promise<IDBConnection[]>;
    create_connection(callback: (response: Response) => Promise<IDBConnection>, body: Partial<IWriteDBConnection>, options?: Partial<ITransportSettings>): Promise<IDBConnection>;
    connection(callback: (response: Response) => Promise<IDBConnection>, connection_name: string, fields?: string, options?: Partial<ITransportSettings>): Promise<IDBConnection>;
    update_connection(callback: (response: Response) => Promise<IDBConnection>, connection_name: string, body: Partial<IWriteDBConnection>, options?: Partial<ITransportSettings>): Promise<IDBConnection>;
    delete_connection(callback: (response: Response) => Promise<string>, connection_name: string, options?: Partial<ITransportSettings>): Promise<string>;
    delete_connection_override(callback: (response: Response) => Promise<string>, connection_name: string, override_context: string, options?: Partial<ITransportSettings>): Promise<string>;
    test_connection(callback: (response: Response) => Promise<IDBConnectionTestResult[]>, connection_name: string, tests?: DelimArray<string>, options?: Partial<ITransportSettings>): Promise<IDBConnectionTestResult[]>;
    test_connection_config(callback: (response: Response) => Promise<IDBConnectionTestResult[]>, body: Partial<IWriteDBConnection>, tests?: DelimArray<string>, options?: Partial<ITransportSettings>): Promise<IDBConnectionTestResult[]>;
    all_dialect_infos(callback: (response: Response) => Promise<IDialectInfo[]>, fields?: string, options?: Partial<ITransportSettings>): Promise<IDialectInfo[]>;
    all_external_oauth_applications(callback: (response: Response) => Promise<IExternalOauthApplication[]>, request: IRequestAllExternalOauthApplications, options?: Partial<ITransportSettings>): Promise<IExternalOauthApplication[]>;
    create_external_oauth_application(callback: (response: Response) => Promise<IExternalOauthApplication>, body: Partial<IWriteExternalOauthApplication>, options?: Partial<ITransportSettings>): Promise<IExternalOauthApplication>;
    update_external_oauth_application(callback: (response: Response) => Promise<IExternalOauthApplication>, client_id: string, body: Partial<IWriteExternalOauthApplication>, options?: Partial<ITransportSettings>): Promise<IExternalOauthApplication>;
    create_oauth_application_user_state(callback: (response: Response) => Promise<ICreateOAuthApplicationUserStateResponse>, body: Partial<ICreateOAuthApplicationUserStateRequest>, options?: Partial<ITransportSettings>): Promise<ICreateOAuthApplicationUserStateResponse>;
    all_ssh_servers(callback: (response: Response) => Promise<ISshServer[]>, fields?: string, options?: Partial<ITransportSettings>): Promise<ISshServer[]>;
    create_ssh_server(callback: (response: Response) => Promise<ISshServer>, body: Partial<IWriteSshServer>, options?: Partial<ITransportSettings>): Promise<ISshServer>;
    ssh_server(callback: (response: Response) => Promise<ISshServer>, ssh_server_id: string, options?: Partial<ITransportSettings>): Promise<ISshServer>;
    update_ssh_server(callback: (response: Response) => Promise<ISshServer>, ssh_server_id: string, body: Partial<IWriteSshServer>, options?: Partial<ITransportSettings>): Promise<ISshServer>;
    delete_ssh_server(callback: (response: Response) => Promise<string>, ssh_server_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    test_ssh_server(callback: (response: Response) => Promise<ISshServer>, ssh_server_id: string, options?: Partial<ITransportSettings>): Promise<ISshServer>;
    all_ssh_tunnels(callback: (response: Response) => Promise<ISshTunnel[]>, fields?: string, options?: Partial<ITransportSettings>): Promise<ISshTunnel[]>;
    create_ssh_tunnel(callback: (response: Response) => Promise<ISshTunnel>, body: Partial<IWriteSshTunnel>, options?: Partial<ITransportSettings>): Promise<ISshTunnel>;
    ssh_tunnel(callback: (response: Response) => Promise<ISshTunnel>, ssh_tunnel_id: string, options?: Partial<ITransportSettings>): Promise<ISshTunnel>;
    update_ssh_tunnel(callback: (response: Response) => Promise<ISshTunnel>, ssh_tunnel_id: string, body: Partial<IWriteSshTunnel>, options?: Partial<ITransportSettings>): Promise<ISshTunnel>;
    delete_ssh_tunnel(callback: (response: Response) => Promise<string>, ssh_tunnel_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    test_ssh_tunnel(callback: (response: Response) => Promise<ISshTunnel>, ssh_tunnel_id: string, options?: Partial<ITransportSettings>): Promise<ISshTunnel>;
    ssh_public_key(callback: (response: Response) => Promise<ISshPublicKey>, options?: Partial<ITransportSettings>): Promise<ISshPublicKey>;
    search_content_favorites(callback: (response: Response) => Promise<IContentFavorite[]>, request: IRequestSearchContentFavorites, options?: Partial<ITransportSettings>): Promise<IContentFavorite[]>;
    content_favorite(callback: (response: Response) => Promise<IContentFavorite>, content_favorite_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<IContentFavorite>;
    delete_content_favorite(callback: (response: Response) => Promise<string>, content_favorite_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    create_content_favorite(callback: (response: Response) => Promise<IContentFavorite>, body: Partial<IWriteContentFavorite>, options?: Partial<ITransportSettings>): Promise<IContentFavorite>;
    all_content_metadatas(callback: (response: Response) => Promise<IContentMeta[]>, parent_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<IContentMeta[]>;
    content_metadata(callback: (response: Response) => Promise<IContentMeta>, content_metadata_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<IContentMeta>;
    update_content_metadata(callback: (response: Response) => Promise<IContentMeta>, content_metadata_id: string, body: Partial<IWriteContentMeta>, options?: Partial<ITransportSettings>): Promise<IContentMeta>;
    all_content_metadata_accesses(callback: (response: Response) => Promise<IContentMetaGroupUser[]>, content_metadata_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<IContentMetaGroupUser[]>;
    create_content_metadata_access(callback: (response: Response) => Promise<IContentMetaGroupUser>, body: Partial<IContentMetaGroupUser>, send_boards_notification_email?: boolean, options?: Partial<ITransportSettings>): Promise<IContentMetaGroupUser>;
    update_content_metadata_access(callback: (response: Response) => Promise<IContentMetaGroupUser>, content_metadata_access_id: string, body: Partial<IContentMetaGroupUser>, options?: Partial<ITransportSettings>): Promise<IContentMetaGroupUser>;
    delete_content_metadata_access(callback: (response: Response) => Promise<string>, content_metadata_access_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    search_content(callback: (response: Response) => Promise<IContentSearch[]>, request: IRequestSearchContent, options?: Partial<ITransportSettings>): Promise<IContentSearch[]>;
    content_summary(callback: (response: Response) => Promise<IContentSummary[]>, request: IRequestContentSummary, options?: Partial<ITransportSettings>): Promise<IContentSummary[]>;
    content_thumbnail(callback: (response: Response) => Promise<string>, request: IRequestContentThumbnail, options?: Partial<ITransportSettings>): Promise<string>;
    content_validation(callback: (response: Response) => Promise<IContentValidation>, request: IRequestContentValidation, options?: Partial<ITransportSettings>): Promise<IContentValidation>;
    search_content_views(callback: (response: Response) => Promise<IContentView[]>, request: IRequestSearchContentViews, options?: Partial<ITransportSettings>): Promise<IContentView[]>;
    vector_thumbnail(callback: (response: Response) => Promise<string>, type: string, resource_id: string, reload?: string, options?: Partial<ITransportSettings>): Promise<string>;
    all_dashboards(callback: (response: Response) => Promise<IDashboardBase[]>, fields?: string, options?: Partial<ITransportSettings>): Promise<IDashboardBase[]>;
    create_dashboard(callback: (response: Response) => Promise<IDashboard>, body: Partial<IWriteDashboard>, options?: Partial<ITransportSettings>): Promise<IDashboard>;
    search_dashboards(callback: (response: Response) => Promise<IDashboard[]>, request: IRequestSearchDashboards, options?: Partial<ITransportSettings>): Promise<IDashboard[]>;
    import_lookml_dashboard(callback: (response: Response) => Promise<IDashboard>, lookml_dashboard_id: string, space_id: string, body?: Partial<IWriteDashboard>, raw_locale?: boolean, options?: Partial<ITransportSettings>): Promise<IDashboard>;
    sync_lookml_dashboard(callback: (response: Response) => Promise<number[]>, request: Partial<IRequestSyncLookmlDashboard>, options?: Partial<ITransportSettings>): Promise<number[]>;
    dashboard(callback: (response: Response) => Promise<IDashboard>, dashboard_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<IDashboard>;
    update_dashboard(callback: (response: Response) => Promise<IDashboard>, dashboard_id: string, body: Partial<IWriteDashboard>, options?: Partial<ITransportSettings>): Promise<IDashboard>;
    delete_dashboard(callback: (response: Response) => Promise<string>, dashboard_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    dashboard_aggregate_table_lookml(callback: (response: Response) => Promise<IDashboardAggregateTableLookml>, dashboard_id: string, options?: Partial<ITransportSettings>): Promise<IDashboardAggregateTableLookml>;
    dashboard_lookml(callback: (response: Response) => Promise<IDashboardLookml>, dashboard_id: string, options?: Partial<ITransportSettings>): Promise<IDashboardLookml>;
    move_dashboard(callback: (response: Response) => Promise<IDashboard>, dashboard_id: string, folder_id: string, options?: Partial<ITransportSettings>): Promise<IDashboard>;
    import_dashboard_from_lookml(callback: (response: Response) => Promise<IDashboard>, body: Partial<IWriteDashboardLookml>, options?: Partial<ITransportSettings>): Promise<IDashboard>;
    create_dashboard_from_lookml(callback: (response: Response) => Promise<IDashboard>, body: Partial<IWriteDashboardLookml>, options?: Partial<ITransportSettings>): Promise<IDashboard>;
    copy_dashboard(callback: (response: Response) => Promise<IDashboard>, dashboard_id: string, folder_id?: string, options?: Partial<ITransportSettings>): Promise<IDashboard>;
    search_dashboard_elements(callback: (response: Response) => Promise<IDashboardElement[]>, request: IRequestSearchDashboardElements, options?: Partial<ITransportSettings>): Promise<IDashboardElement[]>;
    dashboard_element(callback: (response: Response) => Promise<IDashboardElement>, dashboard_element_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<IDashboardElement>;
    update_dashboard_element(callback: (response: Response) => Promise<IDashboardElement>, dashboard_element_id: string, body: Partial<IWriteDashboardElement>, fields?: string, options?: Partial<ITransportSettings>): Promise<IDashboardElement>;
    delete_dashboard_element(callback: (response: Response) => Promise<string>, dashboard_element_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    dashboard_dashboard_elements(callback: (response: Response) => Promise<IDashboardElement[]>, dashboard_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<IDashboardElement[]>;
    create_dashboard_element(callback: (response: Response) => Promise<IDashboardElement>, request: IRequestCreateDashboardElement, options?: Partial<ITransportSettings>): Promise<IDashboardElement>;
    dashboard_filter(callback: (response: Response) => Promise<IDashboardFilter>, dashboard_filter_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<IDashboardFilter>;
    update_dashboard_filter(callback: (response: Response) => Promise<IDashboardFilter>, dashboard_filter_id: string, body: Partial<IWriteDashboardFilter>, fields?: string, options?: Partial<ITransportSettings>): Promise<IDashboardFilter>;
    delete_dashboard_filter(callback: (response: Response) => Promise<string>, dashboard_filter_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    dashboard_dashboard_filters(callback: (response: Response) => Promise<IDashboardFilter[]>, dashboard_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<IDashboardFilter[]>;
    create_dashboard_filter(callback: (response: Response) => Promise<IDashboardFilter>, body: Partial<IWriteCreateDashboardFilter>, fields?: string, options?: Partial<ITransportSettings>): Promise<IDashboardFilter>;
    dashboard_layout_component(callback: (response: Response) => Promise<IDashboardLayoutComponent>, dashboard_layout_component_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<IDashboardLayoutComponent>;
    update_dashboard_layout_component(callback: (response: Response) => Promise<IDashboardLayoutComponent>, dashboard_layout_component_id: string, body: Partial<IWriteDashboardLayoutComponent>, fields?: string, options?: Partial<ITransportSettings>): Promise<IDashboardLayoutComponent>;
    dashboard_layout_dashboard_layout_components(callback: (response: Response) => Promise<IDashboardLayoutComponent[]>, dashboard_layout_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<IDashboardLayoutComponent[]>;
    dashboard_layout(callback: (response: Response) => Promise<IDashboardLayout>, dashboard_layout_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<IDashboardLayout>;
    update_dashboard_layout(callback: (response: Response) => Promise<IDashboardLayout>, dashboard_layout_id: string, body: Partial<IWriteDashboardLayout>, fields?: string, options?: Partial<ITransportSettings>): Promise<IDashboardLayout>;
    delete_dashboard_layout(callback: (response: Response) => Promise<string>, dashboard_layout_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    dashboard_dashboard_layouts(callback: (response: Response) => Promise<IDashboardLayout[]>, dashboard_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<IDashboardLayout[]>;
    create_dashboard_layout(callback: (response: Response) => Promise<IDashboardLayout>, body: Partial<IWriteDashboardLayout>, fields?: string, options?: Partial<ITransportSettings>): Promise<IDashboardLayout>;
    perform_data_action(callback: (response: Response) => Promise<IDataActionResponse>, body: Partial<IDataActionRequest>, options?: Partial<ITransportSettings>): Promise<IDataActionResponse>;
    fetch_remote_data_action_form(callback: (response: Response) => Promise<IDataActionForm>, body: Partial<IDictionary<string>>, options?: Partial<ITransportSettings>): Promise<IDataActionForm>;
    all_datagroups(callback: (response: Response) => Promise<IDatagroup[]>, options?: Partial<ITransportSettings>): Promise<IDatagroup[]>;
    datagroup(callback: (response: Response) => Promise<IDatagroup>, datagroup_id: string, options?: Partial<ITransportSettings>): Promise<IDatagroup>;
    update_datagroup(callback: (response: Response) => Promise<IDatagroup>, datagroup_id: string, body: Partial<IWriteDatagroup>, options?: Partial<ITransportSettings>): Promise<IDatagroup>;
    graph_derived_tables_for_model(callback: (response: Response) => Promise<IDependencyGraph>, request: IRequestGraphDerivedTablesForModel, options?: Partial<ITransportSettings>): Promise<IDependencyGraph>;
    graph_derived_tables_for_view(callback: (response: Response) => Promise<IDependencyGraph>, request: IRequestGraphDerivedTablesForView, options?: Partial<ITransportSettings>): Promise<IDependencyGraph>;
    start_pdt_build(callback: (response: Response) => Promise<IMaterializePDT>, request: IRequestStartPdtBuild, options?: Partial<ITransportSettings>): Promise<IMaterializePDT>;
    check_pdt_build(callback: (response: Response) => Promise<IMaterializePDT>, materialization_id: string, options?: Partial<ITransportSettings>): Promise<IMaterializePDT>;
    stop_pdt_build(callback: (response: Response) => Promise<IMaterializePDT>, materialization_id: string, source?: string, options?: Partial<ITransportSettings>): Promise<IMaterializePDT>;
    search_folders(callback: (response: Response) => Promise<IFolder[]>, request: IRequestSearchFolders, options?: Partial<ITransportSettings>): Promise<IFolder[]>;
    folder(callback: (response: Response) => Promise<IFolder>, folder_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<IFolder>;
    update_folder(callback: (response: Response) => Promise<IFolder>, folder_id: string, body: Partial<IUpdateFolder>, options?: Partial<ITransportSettings>): Promise<IFolder>;
    delete_folder(callback: (response: Response) => Promise<string>, folder_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    all_folders(callback: (response: Response) => Promise<IFolderBase[]>, fields?: string, options?: Partial<ITransportSettings>): Promise<IFolderBase[]>;
    create_folder(callback: (response: Response) => Promise<IFolder>, body: Partial<ICreateFolder>, options?: Partial<ITransportSettings>): Promise<IFolder>;
    folder_children(callback: (response: Response) => Promise<IFolder[]>, request: IRequestFolderChildren, options?: Partial<ITransportSettings>): Promise<IFolder[]>;
    folder_children_search(callback: (response: Response) => Promise<IFolder[]>, request: IRequestFolderChildrenSearch, options?: Partial<ITransportSettings>): Promise<IFolder[]>;
    folder_parent(callback: (response: Response) => Promise<IFolder>, folder_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<IFolder>;
    folder_ancestors(callback: (response: Response) => Promise<IFolder[]>, folder_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<IFolder[]>;
    folder_looks(callback: (response: Response) => Promise<ILookWithQuery[]>, folder_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<ILookWithQuery[]>;
    folder_dashboards(callback: (response: Response) => Promise<IDashboard[]>, folder_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<IDashboard[]>;
    all_groups(callback: (response: Response) => Promise<IGroup[]>, request: IRequestAllGroups, options?: Partial<ITransportSettings>): Promise<IGroup[]>;
    create_group(callback: (response: Response) => Promise<IGroup>, body: Partial<IWriteGroup>, fields?: string, options?: Partial<ITransportSettings>): Promise<IGroup>;
    search_groups(callback: (response: Response) => Promise<IGroup[]>, request: IRequestSearchGroups, options?: Partial<ITransportSettings>): Promise<IGroup[]>;
    search_groups_with_roles(callback: (response: Response) => Promise<IGroupSearch[]>, request: IRequestSearchGroupsWithRoles, options?: Partial<ITransportSettings>): Promise<IGroupSearch[]>;
    search_groups_with_hierarchy(callback: (response: Response) => Promise<IGroupHierarchy[]>, request: IRequestSearchGroupsWithHierarchy, options?: Partial<ITransportSettings>): Promise<IGroupHierarchy[]>;
    group(callback: (response: Response) => Promise<IGroup>, group_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<IGroup>;
    update_group(callback: (response: Response) => Promise<IGroup>, group_id: string, body: Partial<IWriteGroup>, fields?: string, options?: Partial<ITransportSettings>): Promise<IGroup>;
    delete_group(callback: (response: Response) => Promise<string>, group_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    all_group_groups(callback: (response: Response) => Promise<IGroup[]>, group_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<IGroup[]>;
    add_group_group(callback: (response: Response) => Promise<IGroup>, group_id: string, body: Partial<IGroupIdForGroupInclusion>, options?: Partial<ITransportSettings>): Promise<IGroup>;
    all_group_users(callback: (response: Response) => Promise<IUser[]>, request: IRequestAllGroupUsers, options?: Partial<ITransportSettings>): Promise<IUser[]>;
    add_group_user(callback: (response: Response) => Promise<IUser>, group_id: string, body: Partial<IGroupIdForGroupUserInclusion>, options?: Partial<ITransportSettings>): Promise<IUser>;
    delete_group_user(callback: (response: Response) => Promise<void>, group_id: string, user_id: string, options?: Partial<ITransportSettings>): Promise<void>;
    delete_group_from_group(callback: (response: Response) => Promise<void>, group_id: string, deleting_group_id: string, options?: Partial<ITransportSettings>): Promise<void>;
    update_user_attribute_group_value(callback: (response: Response) => Promise<IUserAttributeGroupValue>, group_id: string, user_attribute_id: string, body: Partial<IUserAttributeGroupValue>, options?: Partial<ITransportSettings>): Promise<IUserAttributeGroupValue>;
    delete_user_attribute_group_value(callback: (response: Response) => Promise<void>, group_id: string, user_attribute_id: string, options?: Partial<ITransportSettings>): Promise<void>;
    all_primary_homepage_sections(callback: (response: Response) => Promise<IHomepageSection[]>, fields?: string, options?: Partial<ITransportSettings>): Promise<IHomepageSection[]>;
    all_integration_hubs(callback: (response: Response) => Promise<IIntegrationHub[]>, fields?: string, options?: Partial<ITransportSettings>): Promise<IIntegrationHub[]>;
    create_integration_hub(callback: (response: Response) => Promise<IIntegrationHub>, body: Partial<IWriteIntegrationHub>, fields?: string, options?: Partial<ITransportSettings>): Promise<IIntegrationHub>;
    integration_hub(callback: (response: Response) => Promise<IIntegrationHub>, integration_hub_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<IIntegrationHub>;
    update_integration_hub(callback: (response: Response) => Promise<IIntegrationHub>, integration_hub_id: string, body: Partial<IWriteIntegrationHub>, fields?: string, options?: Partial<ITransportSettings>): Promise<IIntegrationHub>;
    delete_integration_hub(callback: (response: Response) => Promise<string>, integration_hub_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    accept_integration_hub_legal_agreement(callback: (response: Response) => Promise<IIntegrationHub>, integration_hub_id: string, options?: Partial<ITransportSettings>): Promise<IIntegrationHub>;
    all_integrations(callback: (response: Response) => Promise<IIntegration[]>, request: IRequestAllIntegrations, options?: Partial<ITransportSettings>): Promise<IIntegration[]>;
    integration(callback: (response: Response) => Promise<IIntegration>, integration_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<IIntegration>;
    update_integration(callback: (response: Response) => Promise<IIntegration>, integration_id: string, body: Partial<IWriteIntegration>, fields?: string, options?: Partial<ITransportSettings>): Promise<IIntegration>;
    fetch_integration_form(callback: (response: Response) => Promise<IDataActionForm>, integration_id: string, body?: Partial<IDictionary<string>>, options?: Partial<ITransportSettings>): Promise<IDataActionForm>;
    test_integration(callback: (response: Response) => Promise<IIntegrationTestResult>, integration_id: string, options?: Partial<ITransportSettings>): Promise<IIntegrationTestResult>;
    all_looks(callback: (response: Response) => Promise<ILook[]>, fields?: string, options?: Partial<ITransportSettings>): Promise<ILook[]>;
    create_look(callback: (response: Response) => Promise<ILookWithQuery>, body: Partial<IWriteLookWithQuery>, fields?: string, options?: Partial<ITransportSettings>): Promise<ILookWithQuery>;
    search_looks(callback: (response: Response) => Promise<ILook[]>, request: IRequestSearchLooks, options?: Partial<ITransportSettings>): Promise<ILook[]>;
    look(callback: (response: Response) => Promise<ILookWithQuery>, look_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<ILookWithQuery>;
    update_look(callback: (response: Response) => Promise<ILookWithQuery>, look_id: string, body: Partial<IWriteLookWithQuery>, fields?: string, options?: Partial<ITransportSettings>): Promise<ILookWithQuery>;
    delete_look(callback: (response: Response) => Promise<string>, look_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    run_look(callback: (response: Response) => Promise<string>, request: IRequestRunLook, options?: Partial<ITransportSettings>): Promise<string>;
    copy_look(callback: (response: Response) => Promise<ILookWithQuery>, look_id: string, folder_id?: string, options?: Partial<ITransportSettings>): Promise<ILookWithQuery>;
    move_look(callback: (response: Response) => Promise<ILookWithQuery>, look_id: string, folder_id: string, options?: Partial<ITransportSettings>): Promise<ILookWithQuery>;
    all_lookml_models(callback: (response: Response) => Promise<ILookmlModel[]>, request: IRequestAllLookmlModels, options?: Partial<ITransportSettings>): Promise<ILookmlModel[]>;
    create_lookml_model(callback: (response: Response) => Promise<ILookmlModel>, body: Partial<IWriteLookmlModel>, options?: Partial<ITransportSettings>): Promise<ILookmlModel>;
    lookml_model(callback: (response: Response) => Promise<ILookmlModel>, lookml_model_name: string, fields?: string, options?: Partial<ITransportSettings>): Promise<ILookmlModel>;
    update_lookml_model(callback: (response: Response) => Promise<ILookmlModel>, lookml_model_name: string, body: Partial<IWriteLookmlModel>, options?: Partial<ITransportSettings>): Promise<ILookmlModel>;
    delete_lookml_model(callback: (response: Response) => Promise<string>, lookml_model_name: string, options?: Partial<ITransportSettings>): Promise<string>;
    lookml_model_explore(callback: (response: Response) => Promise<ILookmlModelExplore>, request: IRequestLookmlModelExplore, options?: Partial<ITransportSettings>): Promise<ILookmlModelExplore>;
    model_fieldname_suggestions(callback: (response: Response) => Promise<IModelFieldSuggestions>, request: IRequestModelFieldnameSuggestions, options?: Partial<ITransportSettings>): Promise<IModelFieldSuggestions>;
    get_model(callback: (response: Response) => Promise<IModel>, model_name: string, options?: Partial<ITransportSettings>): Promise<IModel>;
    connection_databases(callback: (response: Response) => Promise<string[]>, connection_name: string, options?: Partial<ITransportSettings>): Promise<string[]>;
    connection_features(callback: (response: Response) => Promise<IConnectionFeatures>, connection_name: string, fields?: string, options?: Partial<ITransportSettings>): Promise<IConnectionFeatures>;
    connection_schemas(callback: (response: Response) => Promise<ISchema[]>, request: IRequestConnectionSchemas, options?: Partial<ITransportSettings>): Promise<ISchema[]>;
    connection_tables(callback: (response: Response) => Promise<ISchemaTables[]>, request: IRequestConnectionTables, options?: Partial<ITransportSettings>): Promise<ISchemaTables[]>;
    connection_columns(callback: (response: Response) => Promise<ISchemaColumns[]>, request: IRequestConnectionColumns, options?: Partial<ITransportSettings>): Promise<ISchemaColumns[]>;
    connection_search_columns(callback: (response: Response) => Promise<IColumnSearch[]>, request: IRequestConnectionSearchColumns, options?: Partial<ITransportSettings>): Promise<IColumnSearch[]>;
    connection_cost_estimate(callback: (response: Response) => Promise<ICostEstimate>, connection_name: string, body: Partial<ICreateCostEstimate>, fields?: string, options?: Partial<ITransportSettings>): Promise<ICostEstimate>;
    get_ci_run(callback: (response: Response) => Promise<IProjectCIRun>, project_id: string, run_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<IProjectCIRun>;
    create_ci_run(callback: (response: Response) => Promise<ICreateCIRunResponse>, project_id: string, body: Partial<ICreateCIRunRequest>, fields?: string, options?: Partial<ITransportSettings>): Promise<ICreateCIRunResponse>;
    lock_all(callback: (response: Response) => Promise<string>, project_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<string>;
    all_git_branches(callback: (response: Response) => Promise<IGitBranch[]>, project_id: string, options?: Partial<ITransportSettings>): Promise<IGitBranch[]>;
    git_branch(callback: (response: Response) => Promise<IGitBranch>, project_id: string, options?: Partial<ITransportSettings>): Promise<IGitBranch>;
    update_git_branch(callback: (response: Response) => Promise<IGitBranch>, project_id: string, body: Partial<IWriteGitBranch>, options?: Partial<ITransportSettings>): Promise<IGitBranch>;
    create_git_branch(callback: (response: Response) => Promise<IGitBranch>, project_id: string, body: Partial<IWriteGitBranch>, options?: Partial<ITransportSettings>): Promise<IGitBranch>;
    find_git_branch(callback: (response: Response) => Promise<IGitBranch>, project_id: string, branch_name: string, options?: Partial<ITransportSettings>): Promise<IGitBranch>;
    delete_git_branch(callback: (response: Response) => Promise<string>, project_id: string, branch_name: string, options?: Partial<ITransportSettings>): Promise<string>;
    deploy_ref_to_production(callback: (response: Response) => Promise<string>, request: IRequestDeployRefToProduction, options?: Partial<ITransportSettings>): Promise<string>;
    deploy_to_production(callback: (response: Response) => Promise<string>, project_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    reset_project_to_production(callback: (response: Response) => Promise<string>, project_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    reset_project_to_remote(callback: (response: Response) => Promise<string>, project_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    all_projects(callback: (response: Response) => Promise<IProject[]>, fields?: string, options?: Partial<ITransportSettings>): Promise<IProject[]>;
    create_project(callback: (response: Response) => Promise<IProject>, body: Partial<IWriteProject>, options?: Partial<ITransportSettings>): Promise<IProject>;
    project(callback: (response: Response) => Promise<IProject>, project_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<IProject>;
    update_project(callback: (response: Response) => Promise<IProject>, project_id: string, body: Partial<IWriteProject>, fields?: string, options?: Partial<ITransportSettings>): Promise<IProject>;
    manifest(callback: (response: Response) => Promise<IManifest>, project_id: string, options?: Partial<ITransportSettings>): Promise<IManifest>;
    git_deploy_key(callback: (response: Response) => Promise<string>, project_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    create_git_deploy_key(callback: (response: Response) => Promise<string>, project_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    project_validation_results(callback: (response: Response) => Promise<IProjectValidationCache>, project_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<IProjectValidationCache>;
    validate_project(callback: (response: Response) => Promise<IProjectValidation>, project_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<IProjectValidation>;
    project_workspace(callback: (response: Response) => Promise<IProjectWorkspace>, project_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<IProjectWorkspace>;
    all_project_files(callback: (response: Response) => Promise<IProjectFile[]>, project_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<IProjectFile[]>;
    project_file(callback: (response: Response) => Promise<IProjectFile>, project_id: string, file_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<IProjectFile>;
    all_git_connection_tests(callback: (response: Response) => Promise<IGitConnectionTest[]>, project_id: string, remote_url?: string, options?: Partial<ITransportSettings>): Promise<IGitConnectionTest[]>;
    run_git_connection_test(callback: (response: Response) => Promise<IGitConnectionTestResult>, request: IRequestRunGitConnectionTest, options?: Partial<ITransportSettings>): Promise<IGitConnectionTestResult>;
    all_lookml_tests(callback: (response: Response) => Promise<ILookmlTest[]>, project_id: string, file_id?: string, options?: Partial<ITransportSettings>): Promise<ILookmlTest[]>;
    run_lookml_test(callback: (response: Response) => Promise<ILookmlTestResult[]>, request: IRequestRunLookmlTest, options?: Partial<ITransportSettings>): Promise<ILookmlTestResult[]>;
    tag_ref(callback: (response: Response) => Promise<IProject>, request: IRequestTagRef, options?: Partial<ITransportSettings>): Promise<IProject>;
    update_repository_credential(callback: (response: Response) => Promise<IRepositoryCredential>, root_project_id: string, credential_id: string, body: Partial<IWriteRepositoryCredential>, options?: Partial<ITransportSettings>): Promise<IRepositoryCredential>;
    delete_repository_credential(callback: (response: Response) => Promise<string>, root_project_id: string, credential_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    get_all_repository_credentials(callback: (response: Response) => Promise<IRepositoryCredential[]>, root_project_id: string, options?: Partial<ITransportSettings>): Promise<IRepositoryCredential[]>;
    create_query_task(callback: (response: Response) => Promise<IQueryTask>, request: IRequestCreateQueryTask, options?: Partial<ITransportSettings>): Promise<IQueryTask>;
    query_task_multi_results(callback: (response: Response) => Promise<IDictionary<any>>, query_task_ids: DelimArray<string>, options?: Partial<ITransportSettings>): Promise<IDictionary<any>>;
    query_task(callback: (response: Response) => Promise<IQueryTask>, query_task_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<IQueryTask>;
    query_task_results(callback: (response: Response) => Promise<string>, query_task_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    query(callback: (response: Response) => Promise<IQuery>, query_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<IQuery>;
    query_for_slug(callback: (response: Response) => Promise<IQuery>, slug: string, fields?: string, options?: Partial<ITransportSettings>): Promise<IQuery>;
    create_query(callback: (response: Response) => Promise<IQuery>, body: Partial<IWriteQuery>, fields?: string, options?: Partial<ITransportSettings>): Promise<IQuery>;
    run_query(callback: (response: Response) => Promise<string>, request: IRequestRunQuery, options?: Partial<ITransportSettings>): Promise<string>;
    run_inline_query(callback: (response: Response) => Promise<string>, request: IRequestRunInlineQuery, options?: Partial<ITransportSettings>): Promise<string>;
    run_url_encoded_query(callback: (response: Response) => Promise<string>, model_name: string, view_name: string, result_format: string, options?: Partial<ITransportSettings>): Promise<string>;
    merge_query(callback: (response: Response) => Promise<IMergeQuery>, merge_query_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<IMergeQuery>;
    create_merge_query(callback: (response: Response) => Promise<IMergeQuery>, body?: Partial<IWriteMergeQuery>, fields?: string, options?: Partial<ITransportSettings>): Promise<IMergeQuery>;
    all_running_queries(callback: (response: Response) => Promise<IRunningQueries[]>, options?: Partial<ITransportSettings>): Promise<IRunningQueries[]>;
    kill_query(callback: (response: Response) => Promise<string>, query_task_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    create_sql_query(callback: (response: Response) => Promise<ISqlQuery>, body: Partial<ISqlQueryCreate>, options?: Partial<ITransportSettings>): Promise<ISqlQuery>;
    sql_query(callback: (response: Response) => Promise<ISqlQuery>, slug: string, options?: Partial<ITransportSettings>): Promise<ISqlQuery>;
    run_sql_query(callback: (response: Response) => Promise<string>, slug: string, result_format: string, download?: string, options?: Partial<ITransportSettings>): Promise<string>;
    create_look_render_task(callback: (response: Response) => Promise<IRenderTask>, look_id: string, result_format: string, width: number, height: number, fields?: string, options?: Partial<ITransportSettings>): Promise<IRenderTask>;
    create_query_render_task(callback: (response: Response) => Promise<IRenderTask>, query_id: string, result_format: string, width: number, height: number, fields?: string, options?: Partial<ITransportSettings>): Promise<IRenderTask>;
    create_dashboard_render_task(callback: (response: Response) => Promise<IRenderTask>, request: IRequestCreateDashboardRenderTask, options?: Partial<ITransportSettings>): Promise<IRenderTask>;
    render_task(callback: (response: Response) => Promise<IRenderTask>, render_task_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<IRenderTask>;
    render_task_results(callback: (response: Response) => Promise<string>, render_task_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    create_dashboard_element_render_task(callback: (response: Response) => Promise<IRenderTask>, dashboard_element_id: string, result_format: string, width: number, height: number, fields?: string, options?: Partial<ITransportSettings>): Promise<IRenderTask>;
    search_reports(callback: (response: Response) => Promise<IReport[]>, request: IRequestSearchReports, options?: Partial<ITransportSettings>): Promise<IReport[]>;
    search_model_sets(callback: (response: Response) => Promise<IModelSet[]>, request: IRequestSearchModelSets, options?: Partial<ITransportSettings>): Promise<IModelSet[]>;
    model_set(callback: (response: Response) => Promise<IModelSet>, model_set_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<IModelSet>;
    update_model_set(callback: (response: Response) => Promise<IModelSet>, model_set_id: string, body: Partial<IWriteModelSet>, options?: Partial<ITransportSettings>): Promise<IModelSet>;
    delete_model_set(callback: (response: Response) => Promise<string>, model_set_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    all_model_sets(callback: (response: Response) => Promise<IModelSet[]>, fields?: string, options?: Partial<ITransportSettings>): Promise<IModelSet[]>;
    create_model_set(callback: (response: Response) => Promise<IModelSet>, body: Partial<IWriteModelSet>, options?: Partial<ITransportSettings>): Promise<IModelSet>;
    all_permissions(callback: (response: Response) => Promise<IPermission[]>, options?: Partial<ITransportSettings>): Promise<IPermission[]>;
    search_permission_sets(callback: (response: Response) => Promise<IPermissionSet[]>, request: IRequestSearchPermissionSets, options?: Partial<ITransportSettings>): Promise<IPermissionSet[]>;
    permission_set(callback: (response: Response) => Promise<IPermissionSet>, permission_set_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<IPermissionSet>;
    update_permission_set(callback: (response: Response) => Promise<IPermissionSet>, permission_set_id: string, body: Partial<IWritePermissionSet>, options?: Partial<ITransportSettings>): Promise<IPermissionSet>;
    delete_permission_set(callback: (response: Response) => Promise<string>, permission_set_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    all_permission_sets(callback: (response: Response) => Promise<IPermissionSet[]>, fields?: string, options?: Partial<ITransportSettings>): Promise<IPermissionSet[]>;
    create_permission_set(callback: (response: Response) => Promise<IPermissionSet>, body: Partial<IWritePermissionSet>, options?: Partial<ITransportSettings>): Promise<IPermissionSet>;
    all_roles(callback: (response: Response) => Promise<IRole[]>, request: IRequestAllRoles, options?: Partial<ITransportSettings>): Promise<IRole[]>;
    create_role(callback: (response: Response) => Promise<IRole>, body: Partial<IWriteRole>, options?: Partial<ITransportSettings>): Promise<IRole>;
    search_roles(callback: (response: Response) => Promise<IRole[]>, request: IRequestSearchRoles, options?: Partial<ITransportSettings>): Promise<IRole[]>;
    search_roles_with_user_count(callback: (response: Response) => Promise<IRoleSearch[]>, request: IRequestSearchRolesWithUserCount, options?: Partial<ITransportSettings>): Promise<IRoleSearch[]>;
    role(callback: (response: Response) => Promise<IRole>, role_id: string, options?: Partial<ITransportSettings>): Promise<IRole>;
    update_role(callback: (response: Response) => Promise<IRole>, role_id: string, body: Partial<IWriteRole>, options?: Partial<ITransportSettings>): Promise<IRole>;
    delete_role(callback: (response: Response) => Promise<string>, role_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    role_groups(callback: (response: Response) => Promise<IGroup[]>, role_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<IGroup[]>;
    set_role_groups(callback: (response: Response) => Promise<IGroup[]>, role_id: string, body: Partial<string[]>, options?: Partial<ITransportSettings>): Promise<IGroup[]>;
    role_users(callback: (response: Response) => Promise<IUser[]>, request: IRequestRoleUsers, options?: Partial<ITransportSettings>): Promise<IUser[]>;
    set_role_users(callback: (response: Response) => Promise<IUser[]>, role_id: string, body: Partial<string[]>, options?: Partial<ITransportSettings>): Promise<IUser[]>;
    scheduled_plans_for_space(callback: (response: Response) => Promise<IScheduledPlan[]>, space_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<IScheduledPlan[]>;
    scheduled_plan(callback: (response: Response) => Promise<IScheduledPlan>, scheduled_plan_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<IScheduledPlan>;
    update_scheduled_plan(callback: (response: Response) => Promise<IScheduledPlan>, scheduled_plan_id: string, body: Partial<IWriteScheduledPlan>, options?: Partial<ITransportSettings>): Promise<IScheduledPlan>;
    delete_scheduled_plan(callback: (response: Response) => Promise<string>, scheduled_plan_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    all_scheduled_plans(callback: (response: Response) => Promise<IScheduledPlan[]>, request: IRequestAllScheduledPlans, options?: Partial<ITransportSettings>): Promise<IScheduledPlan[]>;
    create_scheduled_plan(callback: (response: Response) => Promise<IScheduledPlan>, body: Partial<IWriteScheduledPlan>, options?: Partial<ITransportSettings>): Promise<IScheduledPlan>;
    scheduled_plan_run_once(callback: (response: Response) => Promise<IScheduledPlan>, body: Partial<IWriteScheduledPlan>, options?: Partial<ITransportSettings>): Promise<IScheduledPlan>;
    search_scheduled_plans(callback: (response: Response) => Promise<IScheduledPlan[]>, request: IRequestSearchScheduledPlans, options?: Partial<ITransportSettings>): Promise<IScheduledPlan[]>;
    scheduled_plans_for_look(callback: (response: Response) => Promise<IScheduledPlan[]>, request: IRequestScheduledPlansForLook, options?: Partial<ITransportSettings>): Promise<IScheduledPlan[]>;
    scheduled_plans_for_dashboard(callback: (response: Response) => Promise<IScheduledPlan[]>, request: IRequestScheduledPlansForDashboard, options?: Partial<ITransportSettings>): Promise<IScheduledPlan[]>;
    scheduled_plans_for_lookml_dashboard(callback: (response: Response) => Promise<IScheduledPlan[]>, request: IRequestScheduledPlansForLookmlDashboard, options?: Partial<ITransportSettings>): Promise<IScheduledPlan[]>;
    scheduled_plan_run_once_by_id(callback: (response: Response) => Promise<IScheduledPlan>, scheduled_plan_id: string, body?: Partial<IWriteScheduledPlan>, options?: Partial<ITransportSettings>): Promise<IScheduledPlan>;
    session(callback: (response: Response) => Promise<IApiSession>, options?: Partial<ITransportSettings>): Promise<IApiSession>;
    update_session(callback: (response: Response) => Promise<IApiSession>, body: Partial<IWriteApiSession>, options?: Partial<ITransportSettings>): Promise<IApiSession>;
    sql_interface_metadata(callback: (response: Response) => Promise<ISqlInterfaceQueryMetadata>, avatica_request?: string, options?: Partial<ITransportSettings>): Promise<ISqlInterfaceQueryMetadata>;
    run_sql_interface_query(callback: (response: Response) => Promise<IJsonBi>, query_id: number, result_format: string, options?: Partial<ITransportSettings>): Promise<IJsonBi>;
    create_sql_interface_query(callback: (response: Response) => Promise<ISqlInterfaceQuery>, body: Partial<IWriteSqlInterfaceQueryCreate>, options?: Partial<ITransportSettings>): Promise<ISqlInterfaceQuery>;
    all_themes(callback: (response: Response) => Promise<ITheme[]>, fields?: string, options?: Partial<ITransportSettings>): Promise<ITheme[]>;
    create_theme(callback: (response: Response) => Promise<ITheme>, body: Partial<IWriteTheme>, options?: Partial<ITransportSettings>): Promise<ITheme>;
    search_themes(callback: (response: Response) => Promise<ITheme[]>, request: IRequestSearchThemes, options?: Partial<ITransportSettings>): Promise<ITheme[]>;
    default_theme(callback: (response: Response) => Promise<ITheme>, ts?: Date, options?: Partial<ITransportSettings>): Promise<ITheme>;
    set_default_theme(callback: (response: Response) => Promise<ITheme>, name: string, options?: Partial<ITransportSettings>): Promise<ITheme>;
    active_themes(callback: (response: Response) => Promise<ITheme[]>, request: IRequestActiveThemes, options?: Partial<ITransportSettings>): Promise<ITheme[]>;
    theme_or_default(callback: (response: Response) => Promise<ITheme>, name: string, ts?: Date, options?: Partial<ITransportSettings>): Promise<ITheme>;
    validate_theme(callback: (response: Response) => Promise<IValidationError>, body: Partial<IWriteTheme>, options?: Partial<ITransportSettings>): Promise<IValidationError>;
    theme(callback: (response: Response) => Promise<ITheme>, theme_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<ITheme>;
    update_theme(callback: (response: Response) => Promise<ITheme>, theme_id: string, body: Partial<IWriteTheme>, options?: Partial<ITransportSettings>): Promise<ITheme>;
    delete_theme(callback: (response: Response) => Promise<string>, theme_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    search_credentials_email(callback: (response: Response) => Promise<ICredentialsEmailSearch[]>, request: IRequestSearchCredentialsEmail, options?: Partial<ITransportSettings>): Promise<ICredentialsEmailSearch[]>;
    me(callback: (response: Response) => Promise<IUser>, fields?: string, options?: Partial<ITransportSettings>): Promise<IUser>;
    all_users(callback: (response: Response) => Promise<IUser[]>, request: IRequestAllUsers, options?: Partial<ITransportSettings>): Promise<IUser[]>;
    create_user(callback: (response: Response) => Promise<IUser>, body?: Partial<IWriteUser>, fields?: string, options?: Partial<ITransportSettings>): Promise<IUser>;
    search_users(callback: (response: Response) => Promise<IUser[]>, request: IRequestSearchUsers, options?: Partial<ITransportSettings>): Promise<IUser[]>;
    search_users_names(callback: (response: Response) => Promise<IUser[]>, request: IRequestSearchUsersNames, options?: Partial<ITransportSettings>): Promise<IUser[]>;
    user(callback: (response: Response) => Promise<IUser>, user_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<IUser>;
    update_user(callback: (response: Response) => Promise<IUser>, user_id: string, body: Partial<IWriteUser>, fields?: string, options?: Partial<ITransportSettings>): Promise<IUser>;
    delete_user(callback: (response: Response) => Promise<string>, user_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    user_for_credential(callback: (response: Response) => Promise<IUser>, credential_type: string, credential_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<IUser>;
    user_credentials_email(callback: (response: Response) => Promise<ICredentialsEmail>, user_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<ICredentialsEmail>;
    create_user_credentials_email(callback: (response: Response) => Promise<ICredentialsEmail>, user_id: string, body: Partial<IWriteCredentialsEmail>, fields?: string, options?: Partial<ITransportSettings>): Promise<ICredentialsEmail>;
    update_user_credentials_email(callback: (response: Response) => Promise<ICredentialsEmail>, user_id: string, body: Partial<IWriteCredentialsEmail>, fields?: string, options?: Partial<ITransportSettings>): Promise<ICredentialsEmail>;
    delete_user_credentials_email(callback: (response: Response) => Promise<string>, user_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    user_credentials_totp(callback: (response: Response) => Promise<ICredentialsTotp>, user_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<ICredentialsTotp>;
    create_user_credentials_totp(callback: (response: Response) => Promise<ICredentialsTotp>, user_id: string, body?: Partial<ICredentialsTotp>, fields?: string, options?: Partial<ITransportSettings>): Promise<ICredentialsTotp>;
    delete_user_credentials_totp(callback: (response: Response) => Promise<string>, user_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    user_credentials_ldap(callback: (response: Response) => Promise<ICredentialsLDAP>, user_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<ICredentialsLDAP>;
    delete_user_credentials_ldap(callback: (response: Response) => Promise<string>, user_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    user_credentials_google(callback: (response: Response) => Promise<ICredentialsGoogle>, user_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<ICredentialsGoogle>;
    delete_user_credentials_google(callback: (response: Response) => Promise<string>, user_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    user_credentials_saml(callback: (response: Response) => Promise<ICredentialsSaml>, user_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<ICredentialsSaml>;
    delete_user_credentials_saml(callback: (response: Response) => Promise<string>, user_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    user_credentials_oidc(callback: (response: Response) => Promise<ICredentialsOIDC>, user_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<ICredentialsOIDC>;
    delete_user_credentials_oidc(callback: (response: Response) => Promise<string>, user_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    user_credentials_api3(callback: (response: Response) => Promise<ICredentialsApi3>, user_id: string, credentials_api3_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<ICredentialsApi3>;
    delete_user_credentials_api3(callback: (response: Response) => Promise<string>, user_id: string, credentials_api3_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    all_user_credentials_api3s(callback: (response: Response) => Promise<ICredentialsApi3[]>, user_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<ICredentialsApi3[]>;
    create_user_credentials_api3(callback: (response: Response) => Promise<ICreateCredentialsApi3>, user_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<ICreateCredentialsApi3>;
    user_credentials_embed(callback: (response: Response) => Promise<ICredentialsEmbed>, user_id: string, credentials_embed_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<ICredentialsEmbed>;
    delete_user_credentials_embed(callback: (response: Response) => Promise<string>, user_id: string, credentials_embed_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    all_user_credentials_embeds(callback: (response: Response) => Promise<ICredentialsEmbed[]>, user_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<ICredentialsEmbed[]>;
    user_credentials_looker_openid(callback: (response: Response) => Promise<ICredentialsLookerOpenid>, user_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<ICredentialsLookerOpenid>;
    delete_user_credentials_looker_openid(callback: (response: Response) => Promise<string>, user_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    user_session(callback: (response: Response) => Promise<ISession>, user_id: string, session_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<ISession>;
    delete_user_session(callback: (response: Response) => Promise<string>, user_id: string, session_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    all_user_sessions(callback: (response: Response) => Promise<ISession[]>, user_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<ISession[]>;
    create_user_credentials_email_password_reset(callback: (response: Response) => Promise<ICredentialsEmail>, request: IRequestCreateUserCredentialsEmailPasswordReset, options?: Partial<ITransportSettings>): Promise<ICredentialsEmail>;
    user_roles(callback: (response: Response) => Promise<IRole[]>, request: IRequestUserRoles, options?: Partial<ITransportSettings>): Promise<IRole[]>;
    set_user_roles(callback: (response: Response) => Promise<IRole[]>, user_id: string, body: Partial<string[]>, fields?: string, options?: Partial<ITransportSettings>): Promise<IRole[]>;
    user_attribute_user_values(callback: (response: Response) => Promise<IUserAttributeWithValue[]>, request: IRequestUserAttributeUserValues, options?: Partial<ITransportSettings>): Promise<IUserAttributeWithValue[]>;
    set_user_attribute_user_value(callback: (response: Response) => Promise<IUserAttributeWithValue>, user_id: string, user_attribute_id: string, body: Partial<IWriteUserAttributeWithValue>, options?: Partial<ITransportSettings>): Promise<IUserAttributeWithValue>;
    delete_user_attribute_user_value(callback: (response: Response) => Promise<void>, user_id: string, user_attribute_id: string, options?: Partial<ITransportSettings>): Promise<void>;
    send_user_credentials_email_password_reset(callback: (response: Response) => Promise<ICredentialsEmail>, user_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<ICredentialsEmail>;
    wipeout_user_emails(callback: (response: Response) => Promise<IUser>, user_id: string, body: Partial<IUserEmailOnly>, fields?: string, options?: Partial<ITransportSettings>): Promise<IUser>;
    create_embed_user(callback: (response: Response) => Promise<IUserPublic>, body: Partial<ICreateEmbedUserRequest>, options?: Partial<ITransportSettings>): Promise<IUserPublic>;
    all_user_attributes(callback: (response: Response) => Promise<IUserAttribute[]>, request: IRequestAllUserAttributes, options?: Partial<ITransportSettings>): Promise<IUserAttribute[]>;
    create_user_attribute(callback: (response: Response) => Promise<IUserAttribute>, body: Partial<IWriteUserAttribute>, fields?: string, options?: Partial<ITransportSettings>): Promise<IUserAttribute>;
    user_attribute(callback: (response: Response) => Promise<IUserAttribute>, user_attribute_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<IUserAttribute>;
    update_user_attribute(callback: (response: Response) => Promise<IUserAttribute>, user_attribute_id: string, body: Partial<IWriteUserAttribute>, fields?: string, options?: Partial<ITransportSettings>): Promise<IUserAttribute>;
    delete_user_attribute(callback: (response: Response) => Promise<string>, user_attribute_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    all_user_attribute_group_values(callback: (response: Response) => Promise<IUserAttributeGroupValue[]>, user_attribute_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<IUserAttributeGroupValue[]>;
    set_user_attribute_group_values(callback: (response: Response) => Promise<IUserAttributeGroupValue[]>, user_attribute_id: string, body: Partial<IUserAttributeGroupValue[]>, options?: Partial<ITransportSettings>): Promise<IUserAttributeGroupValue[]>;
    all_workspaces(callback: (response: Response) => Promise<IWorkspace[]>, options?: Partial<ITransportSettings>): Promise<IWorkspace[]>;
    workspace(callback: (response: Response) => Promise<IWorkspace>, workspace_id: string, options?: Partial<ITransportSettings>): Promise<IWorkspace>;
}
